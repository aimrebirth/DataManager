/* DO NOT EDIT! This is an autogenerated file. */

#pragma once

class Storage
{
public:
    CTable<Building> buildings;
    CTable<ClanMechanoid> clanMechanoids;
    CTable<ClanReputation> clanReputations;
    CTable<Clan> clans;
    CTable<ConfigurationEquipment> configurationEquipments;
    CTable<ConfigurationGood> configurationGoods;
    CTable<ConfigurationProjectile> configurationProjectiles;
    CTable<ConfigurationWeapon> configurationWeapons;
    CTable<Configuration> configurations;
    CTable<Equipment> equipments;
    CTable<Glider> gliders;
    CTable<Good> goods;
    CTable<GroupMechanoid> groupMechanoids;
    CTable<Group> groups;
    CTable<MapBuildingEquipment> mapBuildingEquipments;
    CTable<MapBuildingGlider> mapBuildingGliders;
    CTable<MapBuildingGood> mapBuildingGoods;
    CTable<MapBuildingModificator> mapBuildingModificators;
    CTable<MapBuildingProjectile> mapBuildingProjectiles;
    CTable<MapBuildingWeapon> mapBuildingWeapons;
    CTable<MapBuilding> mapBuildings;
    CTable<MapGood> mapGoods;
    CTable<MapObject> mapObjects;
    CTable<Map> maps;
    CTable<MechanoidQuest> mechanoidQuests;
    CTable<Mechanoid> mechanoids;
    CTable<ModificationClan> modificationClans;
    CTable<ModificationMap> modificationMaps;
    CTable<ModificationMechanoid> modificationMechanoids;
    CTable<Modification> modifications;
    CTable<Modificator> modificators;
    CTable<Object> objects;
    CTable<Player> players;
    CTable<Projectile> projectiles;
    CTable<QuestRewardEquipment> questRewardEquipments;
    CTable<QuestRewardGlider> questRewardGliders;
    CTable<QuestRewardGood> questRewardGoods;
    CTable<QuestRewardModificator> questRewardModificators;
    CTable<QuestRewardProjectile> questRewardProjectiles;
    CTable<QuestRewardReputation> questRewardReputations;
    CTable<QuestRewardWeapon> questRewardWeapons;
    CTable<QuestReward> questRewards;
    CTable<Quest> quests;
    CTable<ScriptVariable> scriptVariables;
    CTable<Setting> settings;
    CTable<String> strings;
    CTable<Table> tables;
    CTable<Weapon> weapons;

public:
    Storage();
    virtual ~Storage();

    virtual void create() const = 0;
    virtual void clear() = 0;
    virtual void load(ProgressCallback callback = ProgressCallback()) = 0;
    virtual void save(ProgressCallback callback = ProgressCallback()) const = 0;

#ifdef USE_QT
    virtual void printQtTreeView(QTreeWidgetItem *root) const = 0;
    virtual QTreeWidgetItem *addRecord(QTreeWidgetItem *item) = 0;
    virtual void deleteRecord(QTreeWidgetItem *item) = 0;
#endif

    virtual OrderedObjectMap getOrderedMap(EObjectType type, std::function<bool(Ptr<IObject>)> f = std::function<bool(Ptr<IObject>)>()) const = 0;

    virtual Ptr<Building> addBuilding() = 0;
    virtual void deleteBuilding(Building *object) = 0;
    virtual Ptr<ClanMechanoid> addClanMechanoid(IObject *parent = 0) = 0;
    virtual void deleteClanMechanoid(ClanMechanoid *object) = 0;
    virtual Ptr<ClanReputation> addClanReputation(IObject *parent = 0) = 0;
    virtual void deleteClanReputation(ClanReputation *object) = 0;
    virtual Ptr<Clan> addClan() = 0;
    virtual void deleteClan(Clan *object) = 0;
    virtual Ptr<ConfigurationEquipment> addConfigurationEquipment(IObject *parent = 0) = 0;
    virtual void deleteConfigurationEquipment(ConfigurationEquipment *object) = 0;
    virtual Ptr<ConfigurationGood> addConfigurationGood(IObject *parent = 0) = 0;
    virtual void deleteConfigurationGood(ConfigurationGood *object) = 0;
    virtual Ptr<ConfigurationProjectile> addConfigurationProjectile(IObject *parent = 0) = 0;
    virtual void deleteConfigurationProjectile(ConfigurationProjectile *object) = 0;
    virtual Ptr<ConfigurationWeapon> addConfigurationWeapon(IObject *parent = 0) = 0;
    virtual void deleteConfigurationWeapon(ConfigurationWeapon *object) = 0;
    virtual Ptr<Configuration> addConfiguration() = 0;
    virtual void deleteConfiguration(Configuration *object) = 0;
    virtual Ptr<Equipment> addEquipment() = 0;
    virtual void deleteEquipment(Equipment *object) = 0;
    virtual Ptr<Glider> addGlider() = 0;
    virtual void deleteGlider(Glider *object) = 0;
    virtual Ptr<Good> addGood() = 0;
    virtual void deleteGood(Good *object) = 0;
    virtual Ptr<GroupMechanoid> addGroupMechanoid(IObject *parent = 0) = 0;
    virtual void deleteGroupMechanoid(GroupMechanoid *object) = 0;
    virtual Ptr<Group> addGroup() = 0;
    virtual void deleteGroup(Group *object) = 0;
    virtual Ptr<MapBuildingEquipment> addMapBuildingEquipment(IObject *parent = 0) = 0;
    virtual void deleteMapBuildingEquipment(MapBuildingEquipment *object) = 0;
    virtual Ptr<MapBuildingGlider> addMapBuildingGlider(IObject *parent = 0) = 0;
    virtual void deleteMapBuildingGlider(MapBuildingGlider *object) = 0;
    virtual Ptr<MapBuildingGood> addMapBuildingGood(IObject *parent = 0) = 0;
    virtual void deleteMapBuildingGood(MapBuildingGood *object) = 0;
    virtual Ptr<MapBuildingModificator> addMapBuildingModificator(IObject *parent = 0) = 0;
    virtual void deleteMapBuildingModificator(MapBuildingModificator *object) = 0;
    virtual Ptr<MapBuildingProjectile> addMapBuildingProjectile(IObject *parent = 0) = 0;
    virtual void deleteMapBuildingProjectile(MapBuildingProjectile *object) = 0;
    virtual Ptr<MapBuildingWeapon> addMapBuildingWeapon(IObject *parent = 0) = 0;
    virtual void deleteMapBuildingWeapon(MapBuildingWeapon *object) = 0;
    virtual Ptr<MapBuilding> addMapBuilding(IObject *parent = 0) = 0;
    virtual void deleteMapBuilding(MapBuilding *object) = 0;
    virtual Ptr<MapGood> addMapGood(IObject *parent = 0) = 0;
    virtual void deleteMapGood(MapGood *object) = 0;
    virtual Ptr<MapObject> addMapObject(IObject *parent = 0) = 0;
    virtual void deleteMapObject(MapObject *object) = 0;
    virtual Ptr<Map> addMap() = 0;
    virtual void deleteMap(Map *object) = 0;
    virtual Ptr<MechanoidQuest> addMechanoidQuest(IObject *parent = 0) = 0;
    virtual void deleteMechanoidQuest(MechanoidQuest *object) = 0;
    virtual Ptr<Mechanoid> addMechanoid() = 0;
    virtual void deleteMechanoid(Mechanoid *object) = 0;
    virtual Ptr<ModificationClan> addModificationClan(IObject *parent = 0) = 0;
    virtual void deleteModificationClan(ModificationClan *object) = 0;
    virtual Ptr<ModificationMap> addModificationMap(IObject *parent = 0) = 0;
    virtual void deleteModificationMap(ModificationMap *object) = 0;
    virtual Ptr<ModificationMechanoid> addModificationMechanoid(IObject *parent = 0) = 0;
    virtual void deleteModificationMechanoid(ModificationMechanoid *object) = 0;
    virtual Ptr<Modification> addModification() = 0;
    virtual void deleteModification(Modification *object) = 0;
    virtual Ptr<Modificator> addModificator() = 0;
    virtual void deleteModificator(Modificator *object) = 0;
    virtual Ptr<Object> addObject() = 0;
    virtual void deleteObject(Object *object) = 0;
    virtual Ptr<Player> addPlayer() = 0;
    virtual void deletePlayer(Player *object) = 0;
    virtual Ptr<Projectile> addProjectile() = 0;
    virtual void deleteProjectile(Projectile *object) = 0;
    virtual Ptr<QuestRewardEquipment> addQuestRewardEquipment(IObject *parent = 0) = 0;
    virtual void deleteQuestRewardEquipment(QuestRewardEquipment *object) = 0;
    virtual Ptr<QuestRewardGlider> addQuestRewardGlider(IObject *parent = 0) = 0;
    virtual void deleteQuestRewardGlider(QuestRewardGlider *object) = 0;
    virtual Ptr<QuestRewardGood> addQuestRewardGood(IObject *parent = 0) = 0;
    virtual void deleteQuestRewardGood(QuestRewardGood *object) = 0;
    virtual Ptr<QuestRewardModificator> addQuestRewardModificator(IObject *parent = 0) = 0;
    virtual void deleteQuestRewardModificator(QuestRewardModificator *object) = 0;
    virtual Ptr<QuestRewardProjectile> addQuestRewardProjectile(IObject *parent = 0) = 0;
    virtual void deleteQuestRewardProjectile(QuestRewardProjectile *object) = 0;
    virtual Ptr<QuestRewardReputation> addQuestRewardReputation(IObject *parent = 0) = 0;
    virtual void deleteQuestRewardReputation(QuestRewardReputation *object) = 0;
    virtual Ptr<QuestRewardWeapon> addQuestRewardWeapon(IObject *parent = 0) = 0;
    virtual void deleteQuestRewardWeapon(QuestRewardWeapon *object) = 0;
    virtual Ptr<QuestReward> addQuestReward(IObject *parent = 0) = 0;
    virtual void deleteQuestReward(QuestReward *object) = 0;
    virtual Ptr<Quest> addQuest() = 0;
    virtual void deleteQuest(Quest *object) = 0;
    virtual Ptr<ScriptVariable> addScriptVariable() = 0;
    virtual void deleteScriptVariable(ScriptVariable *object) = 0;
    virtual Ptr<Setting> addSetting() = 0;
    virtual void deleteSetting(Setting *object) = 0;
    virtual Ptr<String> addString() = 0;
    virtual void deleteString(String *object) = 0;
    virtual Ptr<Table> addTable() = 0;
    virtual void deleteTable(Table *object) = 0;
    virtual Ptr<Weapon> addWeapon() = 0;
    virtual void deleteWeapon(Weapon *object) = 0;

    virtual Ptr<IObject> addRecord(IObject *parent = 0) = 0;
    virtual void deleteRecord(IObject *data) = 0;
};

