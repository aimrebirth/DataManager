/* DO NOT EDIT! This is an autogenerated file. */

class StorageImpl : public Storage
{
#ifdef USE_QT
    Q_DECLARE_TR_FUNCTIONS(StorageImpl)
#endif

private:
    Ptr<Database> db;

private:
    void _loadBuildings();
    void _loadBuildingsPtrs();
    void _loadBuildingsArrays();
    void _saveBuildings() const;

    void _loadClanMechanoids();
    void _loadClanMechanoidsPtrs();
    void _loadClanMechanoidsArrays();
    void _saveClanMechanoids() const;

    void _loadClanReputations();
    void _loadClanReputationsPtrs();
    void _loadClanReputationsArrays();
    void _saveClanReputations() const;

    void _loadClans();
    void _loadClansPtrs();
    void _loadClansArrays();
    void _saveClans() const;

    void _loadConfigurationEquipments();
    void _loadConfigurationEquipmentsPtrs();
    void _loadConfigurationEquipmentsArrays();
    void _saveConfigurationEquipments() const;

    void _loadConfigurationGoods();
    void _loadConfigurationGoodsPtrs();
    void _loadConfigurationGoodsArrays();
    void _saveConfigurationGoods() const;

    void _loadConfigurationProjectiles();
    void _loadConfigurationProjectilesPtrs();
    void _loadConfigurationProjectilesArrays();
    void _saveConfigurationProjectiles() const;

    void _loadConfigurationWeapons();
    void _loadConfigurationWeaponsPtrs();
    void _loadConfigurationWeaponsArrays();
    void _saveConfigurationWeapons() const;

    void _loadConfigurations();
    void _loadConfigurationsPtrs();
    void _loadConfigurationsArrays();
    void _saveConfigurations() const;

    void _loadEquipments();
    void _loadEquipmentsPtrs();
    void _loadEquipmentsArrays();
    void _saveEquipments() const;

    void _loadGliders();
    void _loadGlidersPtrs();
    void _loadGlidersArrays();
    void _saveGliders() const;

    void _loadGoods();
    void _loadGoodsPtrs();
    void _loadGoodsArrays();
    void _saveGoods() const;

    void _loadGroupMechanoids();
    void _loadGroupMechanoidsPtrs();
    void _loadGroupMechanoidsArrays();
    void _saveGroupMechanoids() const;

    void _loadGroups();
    void _loadGroupsPtrs();
    void _loadGroupsArrays();
    void _saveGroups() const;

    void _loadMapBuildingEquipments();
    void _loadMapBuildingEquipmentsPtrs();
    void _loadMapBuildingEquipmentsArrays();
    void _saveMapBuildingEquipments() const;

    void _loadMapBuildingGliders();
    void _loadMapBuildingGlidersPtrs();
    void _loadMapBuildingGlidersArrays();
    void _saveMapBuildingGliders() const;

    void _loadMapBuildingGoods();
    void _loadMapBuildingGoodsPtrs();
    void _loadMapBuildingGoodsArrays();
    void _saveMapBuildingGoods() const;

    void _loadMapBuildingModificators();
    void _loadMapBuildingModificatorsPtrs();
    void _loadMapBuildingModificatorsArrays();
    void _saveMapBuildingModificators() const;

    void _loadMapBuildingProjectiles();
    void _loadMapBuildingProjectilesPtrs();
    void _loadMapBuildingProjectilesArrays();
    void _saveMapBuildingProjectiles() const;

    void _loadMapBuildingWeapons();
    void _loadMapBuildingWeaponsPtrs();
    void _loadMapBuildingWeaponsArrays();
    void _saveMapBuildingWeapons() const;

    void _loadMapBuildings();
    void _loadMapBuildingsPtrs();
    void _loadMapBuildingsArrays();
    void _saveMapBuildings() const;

    void _loadMapObjects();
    void _loadMapObjectsPtrs();
    void _loadMapObjectsArrays();
    void _saveMapObjects() const;

    void _loadMaps();
    void _loadMapsPtrs();
    void _loadMapsArrays();
    void _saveMaps() const;

    void _loadMechanoidQuests();
    void _loadMechanoidQuestsPtrs();
    void _loadMechanoidQuestsArrays();
    void _saveMechanoidQuests() const;

    void _loadMechanoids();
    void _loadMechanoidsPtrs();
    void _loadMechanoidsArrays();
    void _saveMechanoids() const;

    void _loadModificationClans();
    void _loadModificationClansPtrs();
    void _loadModificationClansArrays();
    void _saveModificationClans() const;

    void _loadModificationMaps();
    void _loadModificationMapsPtrs();
    void _loadModificationMapsArrays();
    void _saveModificationMaps() const;

    void _loadModificationMechanoids();
    void _loadModificationMechanoidsPtrs();
    void _loadModificationMechanoidsArrays();
    void _saveModificationMechanoids() const;

    void _loadModifications();
    void _loadModificationsPtrs();
    void _loadModificationsArrays();
    void _saveModifications() const;

    void _loadModificators();
    void _loadModificatorsPtrs();
    void _loadModificatorsArrays();
    void _saveModificators() const;

    void _loadObjects();
    void _loadObjectsPtrs();
    void _loadObjectsArrays();
    void _saveObjects() const;

    void _loadPlayers();
    void _loadPlayersPtrs();
    void _loadPlayersArrays();
    void _savePlayers() const;

    void _loadProjectiles();
    void _loadProjectilesPtrs();
    void _loadProjectilesArrays();
    void _saveProjectiles() const;

    void _loadQuestRewardEquipments();
    void _loadQuestRewardEquipmentsPtrs();
    void _loadQuestRewardEquipmentsArrays();
    void _saveQuestRewardEquipments() const;

    void _loadQuestRewardGliders();
    void _loadQuestRewardGlidersPtrs();
    void _loadQuestRewardGlidersArrays();
    void _saveQuestRewardGliders() const;

    void _loadQuestRewardGoods();
    void _loadQuestRewardGoodsPtrs();
    void _loadQuestRewardGoodsArrays();
    void _saveQuestRewardGoods() const;

    void _loadQuestRewardModificators();
    void _loadQuestRewardModificatorsPtrs();
    void _loadQuestRewardModificatorsArrays();
    void _saveQuestRewardModificators() const;

    void _loadQuestRewardProjectiles();
    void _loadQuestRewardProjectilesPtrs();
    void _loadQuestRewardProjectilesArrays();
    void _saveQuestRewardProjectiles() const;

    void _loadQuestRewardReputations();
    void _loadQuestRewardReputationsPtrs();
    void _loadQuestRewardReputationsArrays();
    void _saveQuestRewardReputations() const;

    void _loadQuestRewardWeapons();
    void _loadQuestRewardWeaponsPtrs();
    void _loadQuestRewardWeaponsArrays();
    void _saveQuestRewardWeapons() const;

    void _loadQuestRewards();
    void _loadQuestRewardsPtrs();
    void _loadQuestRewardsArrays();
    void _saveQuestRewards() const;

    void _loadQuests();
    void _loadQuestsPtrs();
    void _loadQuestsArrays();
    void _saveQuests() const;

    void _loadScriptVariables();
    void _loadScriptVariablesPtrs();
    void _loadScriptVariablesArrays();
    void _saveScriptVariables() const;

    void _loadSettings();
    void _loadSettingsPtrs();
    void _loadSettingsArrays();
    void _saveSettings() const;

    void _loadStrings();
    void _loadStringsPtrs();
    void _loadStringsArrays();
    void _saveStrings() const;

    void _loadWeapons();
    void _loadWeaponsPtrs();
    void _loadWeaponsArrays();
    void _saveWeapons() const;

public:
    StorageImpl(Ptr<Database> db) : db(db) {}

    void setDb(Ptr<Database> db) { this->db = db; }

    virtual void create() const;
    virtual void clear();
    virtual void load(ProgressCallback callback = ProgressCallback());
    virtual void save(ProgressCallback callback = ProgressCallback()) const;

    virtual Ptr<Building> addBuilding(IObject *parent = 0);
    virtual void deleteBuilding(Building *object);
    virtual Ptr<ClanMechanoid> addClanMechanoid(IObject *parent = 0);
    virtual void deleteClanMechanoid(ClanMechanoid *object);
    virtual Ptr<ClanReputation> addClanReputation(IObject *parent = 0);
    virtual void deleteClanReputation(ClanReputation *object);
    virtual Ptr<Clan> addClan(IObject *parent = 0);
    virtual void deleteClan(Clan *object);
    virtual Ptr<ConfigurationEquipment> addConfigurationEquipment(IObject *parent = 0);
    virtual void deleteConfigurationEquipment(ConfigurationEquipment *object);
    virtual Ptr<ConfigurationGood> addConfigurationGood(IObject *parent = 0);
    virtual void deleteConfigurationGood(ConfigurationGood *object);
    virtual Ptr<ConfigurationProjectile> addConfigurationProjectile(IObject *parent = 0);
    virtual void deleteConfigurationProjectile(ConfigurationProjectile *object);
    virtual Ptr<ConfigurationWeapon> addConfigurationWeapon(IObject *parent = 0);
    virtual void deleteConfigurationWeapon(ConfigurationWeapon *object);
    virtual Ptr<Configuration> addConfiguration(IObject *parent = 0);
    virtual void deleteConfiguration(Configuration *object);
    virtual Ptr<Equipment> addEquipment(IObject *parent = 0);
    virtual void deleteEquipment(Equipment *object);
    virtual Ptr<Glider> addGlider(IObject *parent = 0);
    virtual void deleteGlider(Glider *object);
    virtual Ptr<Good> addGood(IObject *parent = 0);
    virtual void deleteGood(Good *object);
    virtual Ptr<GroupMechanoid> addGroupMechanoid(IObject *parent = 0);
    virtual void deleteGroupMechanoid(GroupMechanoid *object);
    virtual Ptr<Group> addGroup(IObject *parent = 0);
    virtual void deleteGroup(Group *object);
    virtual Ptr<MapBuildingEquipment> addMapBuildingEquipment(IObject *parent = 0);
    virtual void deleteMapBuildingEquipment(MapBuildingEquipment *object);
    virtual Ptr<MapBuildingGlider> addMapBuildingGlider(IObject *parent = 0);
    virtual void deleteMapBuildingGlider(MapBuildingGlider *object);
    virtual Ptr<MapBuildingGood> addMapBuildingGood(IObject *parent = 0);
    virtual void deleteMapBuildingGood(MapBuildingGood *object);
    virtual Ptr<MapBuildingModificator> addMapBuildingModificator(IObject *parent = 0);
    virtual void deleteMapBuildingModificator(MapBuildingModificator *object);
    virtual Ptr<MapBuildingProjectile> addMapBuildingProjectile(IObject *parent = 0);
    virtual void deleteMapBuildingProjectile(MapBuildingProjectile *object);
    virtual Ptr<MapBuildingWeapon> addMapBuildingWeapon(IObject *parent = 0);
    virtual void deleteMapBuildingWeapon(MapBuildingWeapon *object);
    virtual Ptr<MapBuilding> addMapBuilding(IObject *parent = 0);
    virtual void deleteMapBuilding(MapBuilding *object);
    virtual Ptr<MapObject> addMapObject(IObject *parent = 0);
    virtual void deleteMapObject(MapObject *object);
    virtual Ptr<Map> addMap(IObject *parent = 0);
    virtual void deleteMap(Map *object);
    virtual Ptr<MechanoidQuest> addMechanoidQuest(IObject *parent = 0);
    virtual void deleteMechanoidQuest(MechanoidQuest *object);
    virtual Ptr<Mechanoid> addMechanoid(IObject *parent = 0);
    virtual void deleteMechanoid(Mechanoid *object);
    virtual Ptr<ModificationClan> addModificationClan(IObject *parent = 0);
    virtual void deleteModificationClan(ModificationClan *object);
    virtual Ptr<ModificationMap> addModificationMap(IObject *parent = 0);
    virtual void deleteModificationMap(ModificationMap *object);
    virtual Ptr<ModificationMechanoid> addModificationMechanoid(IObject *parent = 0);
    virtual void deleteModificationMechanoid(ModificationMechanoid *object);
    virtual Ptr<Modification> addModification(IObject *parent = 0);
    virtual void deleteModification(Modification *object);
    virtual Ptr<Modificator> addModificator(IObject *parent = 0);
    virtual void deleteModificator(Modificator *object);
    virtual Ptr<Object> addObject(IObject *parent = 0);
    virtual void deleteObject(Object *object);
    virtual Ptr<Player> addPlayer(IObject *parent = 0);
    virtual void deletePlayer(Player *object);
    virtual Ptr<Projectile> addProjectile(IObject *parent = 0);
    virtual void deleteProjectile(Projectile *object);
    virtual Ptr<QuestRewardEquipment> addQuestRewardEquipment(IObject *parent = 0);
    virtual void deleteQuestRewardEquipment(QuestRewardEquipment *object);
    virtual Ptr<QuestRewardGlider> addQuestRewardGlider(IObject *parent = 0);
    virtual void deleteQuestRewardGlider(QuestRewardGlider *object);
    virtual Ptr<QuestRewardGood> addQuestRewardGood(IObject *parent = 0);
    virtual void deleteQuestRewardGood(QuestRewardGood *object);
    virtual Ptr<QuestRewardModificator> addQuestRewardModificator(IObject *parent = 0);
    virtual void deleteQuestRewardModificator(QuestRewardModificator *object);
    virtual Ptr<QuestRewardProjectile> addQuestRewardProjectile(IObject *parent = 0);
    virtual void deleteQuestRewardProjectile(QuestRewardProjectile *object);
    virtual Ptr<QuestRewardReputation> addQuestRewardReputation(IObject *parent = 0);
    virtual void deleteQuestRewardReputation(QuestRewardReputation *object);
    virtual Ptr<QuestRewardWeapon> addQuestRewardWeapon(IObject *parent = 0);
    virtual void deleteQuestRewardWeapon(QuestRewardWeapon *object);
    virtual Ptr<QuestReward> addQuestReward(IObject *parent = 0);
    virtual void deleteQuestReward(QuestReward *object);
    virtual Ptr<Quest> addQuest(IObject *parent = 0);
    virtual void deleteQuest(Quest *object);
    virtual Ptr<ScriptVariable> addScriptVariable(IObject *parent = 0);
    virtual void deleteScriptVariable(ScriptVariable *object);
    virtual Ptr<Setting> addSetting(IObject *parent = 0);
    virtual void deleteSetting(Setting *object);
    virtual Ptr<String> addString(IObject *parent = 0);
    virtual void deleteString(String *object);
    virtual Ptr<Weapon> addWeapon(IObject *parent = 0);
    virtual void deleteWeapon(Weapon *object);

    virtual Ptr<IObject> addRecord(IObject *parent = 0);
    virtual void deleteRecord(IObject *data);

#ifdef USE_QT
    virtual void printQtTreeView(QTreeWidgetItem *root) const;
    virtual QTreeWidgetItem *addRecord(QTreeWidgetItem *item);
    virtual void deleteRecord(QTreeWidgetItem *item);
#endif
    virtual OrderedObjectMap getOrderedMap(EObjectType type) const;
};

