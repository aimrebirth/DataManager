/* DO NOT EDIT! This is an autogenerated file. */

enum class EObjectType : EnumType
{
    Building,
    ClanReputation,
    Clan,
    ConfigurationEquipment,
    ConfigurationGood,
    ConfigurationProjectile,
    ConfigurationWeapon,
    Configuration,
    Coordinate,
    Equipment,
    Glider,
    Good,
    MapBuildingEquipment,
    MapBuildingGlider,
    MapBuildingGood,
    MapBuildingModificator,
    MapBuildingProjectile,
    MapBuildingWeapon,
    MapBuilding,
    MapObject,
    Map,
    MechanoidGroup,
    Mechanoid,
    ModificationClan,
    ModificationMap,
    ModificationMechanoid,
    Modification,
    Modificator,
    Object,
    Player,
    Projectile,
    QuestRewardEquipment,
    QuestRewardGlider,
    QuestRewardGood,
    QuestRewardModificator,
    QuestRewardProjectile,
    QuestRewardReputation,
    QuestRewardWeapon,
    QuestReward,
    Quest,
    SaveObject,
    SavePlayer,
    SaveQuest,
    Save,
    ScriptVariable,
    String,
    Weapon,
};

struct Building;
struct ClanReputation;
struct Clan;
struct ConfigurationEquipment;
struct ConfigurationGood;
struct ConfigurationProjectile;
struct ConfigurationWeapon;
struct Configuration;
struct Coordinate;
struct Equipment;
struct Glider;
struct Good;
struct MapBuildingEquipment;
struct MapBuildingGlider;
struct MapBuildingGood;
struct MapBuildingModificator;
struct MapBuildingProjectile;
struct MapBuildingWeapon;
struct MapBuilding;
struct MapObject;
struct Map;
struct MechanoidGroup;
struct Mechanoid;
struct ModificationClan;
struct ModificationMap;
struct ModificationMechanoid;
struct Modification;
struct Modificator;
struct Object;
struct Player;
struct Projectile;
struct QuestRewardEquipment;
struct QuestRewardGlider;
struct QuestRewardGood;
struct QuestRewardModificator;
struct QuestRewardProjectile;
struct QuestRewardReputation;
struct QuestRewardWeapon;
struct QuestReward;
struct Quest;
struct SaveObject;
struct SavePlayer;
struct SaveQuest;
struct Save;
struct ScriptVariable;
struct String;
struct Weapon;

struct IObject
{
    virtual ~IObject(){}

    virtual EObjectType getType() const = 0;
    virtual Text getVariableString(int columnId) const = 0;
    virtual void setVariableString(int columnId, Text text) = 0;
};

struct Building : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    IdPtr<String> name;

    virtual EObjectType getType() const
    {
        return EObjectType::Building;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ClanReputation : public IObject
{
    IdPtr<Clan> clan;
    IdPtr<Clan> clan2;
    float reputation = 0.0f;

    virtual EObjectType getType() const
    {
        return EObjectType::ClanReputation;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(clan);
        case 1:
            return to_string(clan2);
        case 2:
            { std::stringstream ss; ss << reputation; return ss.str(); }
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            clan.id = std::stoi(text.string());
            break;
        case 1:
            clan2.id = std::stoi(text.string());
            break;
        case 2:
            reputation = std::stof(text.string());
            break;
        default:
            break;
        }
    }
};

struct Clan : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    IdPtr<String> name;

    CVector<Ptr<ClanReputation>> reputations;

    virtual EObjectType getType() const
    {
        return EObjectType::Clan;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ConfigurationEquipment : public IObject
{
    IdPtr<Configuration> configuration;
    IdPtr<Equipment> equipment;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::ConfigurationEquipment;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(configuration);
        case 1:
            return to_string(equipment);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            configuration.id = std::stoi(text.string());
            break;
        case 1:
            equipment.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ConfigurationGood : public IObject
{
    IdPtr<Configuration> configuration;
    IdPtr<Good> goods;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::ConfigurationGood;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(configuration);
        case 1:
            return to_string(goods);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            configuration.id = std::stoi(text.string());
            break;
        case 1:
            goods.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ConfigurationProjectile : public IObject
{
    IdPtr<Configuration> configuration;
    IdPtr<Projectile> projectile;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::ConfigurationProjectile;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(configuration);
        case 1:
            return to_string(projectile);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            configuration.id = std::stoi(text.string());
            break;
        case 1:
            projectile.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ConfigurationWeapon : public IObject
{
    IdPtr<Configuration> configuration;
    IdPtr<Weapon> weapon;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::ConfigurationWeapon;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(configuration);
        case 1:
            return to_string(weapon);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            configuration.id = std::stoi(text.string());
            break;
        case 1:
            weapon.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Configuration : public IObject
{
    int id = 0;
    Text text_id;
    IdPtr<String> name;
    IdPtr<Glider> glider;

    CVector<Ptr<ConfigurationEquipment>> equipments;
    CVector<Ptr<ConfigurationGood>> goods;
    CVector<Ptr<ConfigurationProjectile>> projectiles;
    CVector<Ptr<ConfigurationWeapon>> weapons;

    virtual EObjectType getType() const
    {
        return EObjectType::Configuration;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(name);
        case 3:
            return to_string(glider);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            name.id = std::stoi(text.string());
            break;
        case 3:
            glider.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Coordinate : public IObject
{
    int id = 0;
    float x = 0.0f;
    float y = 0.0f;
    float z = 0.0f;
    float yaw = 0.0f;
    float pitch = 0.0f;
    float roll = 0.0f;

    virtual EObjectType getType() const
    {
        return EObjectType::Coordinate;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            { std::stringstream ss; ss << x; return ss.str(); }
        case 2:
            { std::stringstream ss; ss << y; return ss.str(); }
        case 3:
            { std::stringstream ss; ss << z; return ss.str(); }
        case 4:
            { std::stringstream ss; ss << yaw; return ss.str(); }
        case 5:
            { std::stringstream ss; ss << pitch; return ss.str(); }
        case 6:
            { std::stringstream ss; ss << roll; return ss.str(); }
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            x = std::stof(text.string());
            break;
        case 2:
            y = std::stof(text.string());
            break;
        case 3:
            z = std::stof(text.string());
            break;
        case 4:
            yaw = std::stof(text.string());
            break;
        case 5:
            pitch = std::stof(text.string());
            break;
        case 6:
            roll = std::stof(text.string());
            break;
        default:
            break;
        }
    }
};

struct Equipment : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int type = 0;
    int standard = 0;
    float weight = 0.0f;
    float durability = 0.0f;
    float power = 0.0f;
    float value1 = 0.0f;
    float value2 = 0.0f;
    float value3 = 0.0f;
    int manual = 0;
    float price = 0.0f;
    int notrade = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::Equipment;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        case 4:
            return to_string(type);
        case 5:
            return to_string(standard);
        case 6:
            { std::stringstream ss; ss << weight; return ss.str(); }
        case 7:
            { std::stringstream ss; ss << durability; return ss.str(); }
        case 8:
            { std::stringstream ss; ss << power; return ss.str(); }
        case 9:
            { std::stringstream ss; ss << value1; return ss.str(); }
        case 10:
            { std::stringstream ss; ss << value2; return ss.str(); }
        case 11:
            { std::stringstream ss; ss << value3; return ss.str(); }
        case 12:
            return to_string(manual);
        case 13:
            { std::stringstream ss; ss << price; return ss.str(); }
        case 14:
            return to_string(notrade);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name.id = std::stoi(text.string());
            break;
        case 4:
            type = std::stoi(text.string());
            break;
        case 5:
            standard = std::stoi(text.string());
            break;
        case 6:
            weight = std::stof(text.string());
            break;
        case 7:
            durability = std::stof(text.string());
            break;
        case 8:
            power = std::stof(text.string());
            break;
        case 9:
            value1 = std::stof(text.string());
            break;
        case 10:
            value2 = std::stof(text.string());
            break;
        case 11:
            value3 = std::stof(text.string());
            break;
        case 12:
            manual = std::stoi(text.string());
            break;
        case 13:
            price = std::stof(text.string());
            break;
        case 14:
            notrade = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Glider : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int standard = 0;
    float weight = 0.0f;
    float maxweight = 0.0f;
    float rotatespeed = 0.0f;
    float armor = 0.0f;
    int price = 0;
    float restore = 0.0f;
    float power = 0.0f;
    int special = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::Glider;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        case 4:
            return to_string(standard);
        case 5:
            { std::stringstream ss; ss << weight; return ss.str(); }
        case 6:
            { std::stringstream ss; ss << maxweight; return ss.str(); }
        case 7:
            { std::stringstream ss; ss << rotatespeed; return ss.str(); }
        case 8:
            { std::stringstream ss; ss << armor; return ss.str(); }
        case 9:
            return to_string(price);
        case 10:
            { std::stringstream ss; ss << restore; return ss.str(); }
        case 11:
            { std::stringstream ss; ss << power; return ss.str(); }
        case 12:
            return to_string(special);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name.id = std::stoi(text.string());
            break;
        case 4:
            standard = std::stoi(text.string());
            break;
        case 5:
            weight = std::stof(text.string());
            break;
        case 6:
            maxweight = std::stof(text.string());
            break;
        case 7:
            rotatespeed = std::stof(text.string());
            break;
        case 8:
            armor = std::stof(text.string());
            break;
        case 9:
            price = std::stoi(text.string());
            break;
        case 10:
            restore = std::stof(text.string());
            break;
        case 11:
            power = std::stof(text.string());
            break;
        case 12:
            special = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Good : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int price = 0;
    int notrade = 0;
    float weight = 0.0f;

    virtual EObjectType getType() const
    {
        return EObjectType::Good;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        case 4:
            return to_string(price);
        case 5:
            return to_string(notrade);
        case 6:
            { std::stringstream ss; ss << weight; return ss.str(); }
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name.id = std::stoi(text.string());
            break;
        case 4:
            price = std::stoi(text.string());
            break;
        case 5:
            notrade = std::stoi(text.string());
            break;
        case 6:
            weight = std::stof(text.string());
            break;
        default:
            break;
        }
    }
};

struct MapBuildingEquipment : public IObject
{
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Equipment> equipment;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::MapBuildingEquipment;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(mapBuilding);
        case 1:
            return to_string(equipment);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            mapBuilding.id = std::stoi(text.string());
            break;
        case 1:
            equipment.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct MapBuildingGlider : public IObject
{
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Glider> glider;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::MapBuildingGlider;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(mapBuilding);
        case 1:
            return to_string(glider);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            mapBuilding.id = std::stoi(text.string());
            break;
        case 1:
            glider.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct MapBuildingGood : public IObject
{
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Good> goods;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::MapBuildingGood;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(mapBuilding);
        case 1:
            return to_string(goods);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            mapBuilding.id = std::stoi(text.string());
            break;
        case 1:
            goods.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct MapBuildingModificator : public IObject
{
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Modificator> modificator;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::MapBuildingModificator;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(mapBuilding);
        case 1:
            return to_string(modificator);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            mapBuilding.id = std::stoi(text.string());
            break;
        case 1:
            modificator.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct MapBuildingProjectile : public IObject
{
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Projectile> projectile;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::MapBuildingProjectile;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(mapBuilding);
        case 1:
            return to_string(projectile);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            mapBuilding.id = std::stoi(text.string());
            break;
        case 1:
            projectile.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct MapBuildingWeapon : public IObject
{
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Weapon> weapon;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::MapBuildingWeapon;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(mapBuilding);
        case 1:
            return to_string(weapon);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            mapBuilding.id = std::stoi(text.string());
            break;
        case 1:
            weapon.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct MapBuilding : public IObject
{
    int id = 0;
    Text text_id;
    IdPtr<Map> map;
    IdPtr<Building> building;
    IdPtr<Coordinate> coordinate;

    CVector<Ptr<MapBuildingEquipment>> equipments;
    CVector<Ptr<MapBuildingGlider>> gliders;
    CVector<Ptr<MapBuildingGood>> goods;
    CVector<Ptr<MapBuildingModificator>> modificators;
    CVector<Ptr<MapBuildingProjectile>> projectiles;
    CVector<Ptr<MapBuildingWeapon>> weapons;

    virtual EObjectType getType() const
    {
        return EObjectType::MapBuilding;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(map);
        case 3:
            return to_string(building);
        case 4:
            return to_string(coordinate);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            map.id = std::stoi(text.string());
            break;
        case 3:
            building.id = std::stoi(text.string());
            break;
        case 4:
            coordinate.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct MapObject : public IObject
{
    int id = 0;
    IdPtr<Map> map;
    IdPtr<Object> object;
    IdPtr<Coordinate> coordinate;

    virtual EObjectType getType() const
    {
        return EObjectType::MapObject;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(map);
        case 2:
            return to_string(object);
        case 3:
            return to_string(coordinate);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            map.id = std::stoi(text.string());
            break;
        case 2:
            object.id = std::stoi(text.string());
            break;
        case 3:
            coordinate.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Map : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    IdPtr<String> name;

    virtual EObjectType getType() const
    {
        return EObjectType::Map;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct MechanoidGroup : public IObject
{
    int id = 0;
    Text text_id;
    IdPtr<String> name;

    virtual EObjectType getType() const
    {
        return EObjectType::MechanoidGroup;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(name);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            name.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Mechanoid : public IObject
{
    int id = 0;
    Text text_id;
    Text name;
    int generation = 0;
    float rating = 0.0f;
    float money = 0.0f;
    IdPtr<Configuration> configuration;
    IdPtr<Clan> clan;
    IdPtr<MechanoidGroup> group;
    float rating_fight = 0.0f;
    float rating_courier = 0.0f;
    float rating_trade = 0.0f;
    IdPtr<Map> map;
    IdPtr<MapBuilding> map_building;
    IdPtr<Coordinate> coordinate;

    virtual EObjectType getType() const
    {
        return EObjectType::Mechanoid;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(name);
        case 3:
            return to_string(generation);
        case 4:
            { std::stringstream ss; ss << rating; return ss.str(); }
        case 5:
            { std::stringstream ss; ss << money; return ss.str(); }
        case 6:
            return to_string(configuration);
        case 7:
            return to_string(clan);
        case 8:
            return to_string(group);
        case 9:
            { std::stringstream ss; ss << rating_fight; return ss.str(); }
        case 10:
            { std::stringstream ss; ss << rating_courier; return ss.str(); }
        case 11:
            { std::stringstream ss; ss << rating_trade; return ss.str(); }
        case 12:
            return to_string(map);
        case 13:
            return to_string(map_building);
        case 14:
            return to_string(coordinate);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            name = text.string();
            break;
        case 3:
            generation = std::stoi(text.string());
            break;
        case 4:
            rating = std::stof(text.string());
            break;
        case 5:
            money = std::stof(text.string());
            break;
        case 6:
            configuration.id = std::stoi(text.string());
            break;
        case 7:
            clan.id = std::stoi(text.string());
            break;
        case 8:
            group.id = std::stoi(text.string());
            break;
        case 9:
            rating_fight = std::stof(text.string());
            break;
        case 10:
            rating_courier = std::stof(text.string());
            break;
        case 11:
            rating_trade = std::stof(text.string());
            break;
        case 12:
            map.id = std::stoi(text.string());
            break;
        case 13:
            map_building.id = std::stoi(text.string());
            break;
        case 14:
            coordinate.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ModificationClan : public IObject
{
    IdPtr<Modification> modification;
    IdPtr<Clan> clan;

    virtual EObjectType getType() const
    {
        return EObjectType::ModificationClan;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(modification);
        case 1:
            return to_string(clan);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            modification.id = std::stoi(text.string());
            break;
        case 1:
            clan.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ModificationMap : public IObject
{
    IdPtr<Modification> modification;
    IdPtr<Map> map;

    virtual EObjectType getType() const
    {
        return EObjectType::ModificationMap;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(modification);
        case 1:
            return to_string(map);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            modification.id = std::stoi(text.string());
            break;
        case 1:
            map.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ModificationMechanoid : public IObject
{
    IdPtr<Modification> modification;
    IdPtr<Mechanoid> mechanoid;

    virtual EObjectType getType() const
    {
        return EObjectType::ModificationMechanoid;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(modification);
        case 1:
            return to_string(mechanoid);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            modification.id = std::stoi(text.string());
            break;
        case 1:
            mechanoid.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Modification : public IObject
{
    int id = 0;
    Text name;
    Text directory;
    Text author;
    Text date_created;
    Text date_modified;
    Text comment;
    float version = 0.0f;
    Text script_language;
    Text script_main;

    CVector<Ptr<ModificationClan>> clans;
    CVector<Ptr<ModificationMap>> maps;
    CVector<Ptr<ModificationMechanoid>> mechanoids;

    virtual EObjectType getType() const
    {
        return EObjectType::Modification;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(name);
        case 2:
            return to_string(directory);
        case 3:
            return to_string(author);
        case 4:
            return to_string(date_created);
        case 5:
            return to_string(date_modified);
        case 6:
            return to_string(comment);
        case 7:
            { std::stringstream ss; ss << version; return ss.str(); }
        case 8:
            return to_string(script_language);
        case 9:
            return to_string(script_main);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            name = text.string();
            break;
        case 2:
            directory = text.string();
            break;
        case 3:
            author = text.string();
            break;
        case 4:
            date_created = text.string();
            break;
        case 5:
            date_modified = text.string();
            break;
        case 6:
            comment = text.string();
            break;
        case 7:
            version = std::stof(text.string());
            break;
        case 8:
            script_language = text.string();
            break;
        case 9:
            script_main = text.string();
            break;
        default:
            break;
        }
    }
};

struct Modificator : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    Text name;
    float probability = 0.0f;
    float price = 0.0f;
    float k_price = 0.0f;
    float k_param1 = 0.0f;
    float k_param2 = 0.0f;

    virtual EObjectType getType() const
    {
        return EObjectType::Modificator;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        case 4:
            { std::stringstream ss; ss << probability; return ss.str(); }
        case 5:
            { std::stringstream ss; ss << price; return ss.str(); }
        case 6:
            { std::stringstream ss; ss << k_price; return ss.str(); }
        case 7:
            { std::stringstream ss; ss << k_param1; return ss.str(); }
        case 8:
            { std::stringstream ss; ss << k_param2; return ss.str(); }
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name = text.string();
            break;
        case 4:
            probability = std::stof(text.string());
            break;
        case 5:
            price = std::stof(text.string());
            break;
        case 6:
            k_price = std::stof(text.string());
            break;
        case 7:
            k_param1 = std::stof(text.string());
            break;
        case 8:
            k_param2 = std::stof(text.string());
            break;
        default:
            break;
        }
    }
};

struct Object : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    Text name;
    int type = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::Object;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        case 4:
            return to_string(type);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name = text.string();
            break;
        case 4:
            type = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Player : public IObject
{
    int id = 0;
    IdPtr<Mechanoid> mechanoid;

    virtual EObjectType getType() const
    {
        return EObjectType::Player;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(mechanoid);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            mechanoid.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Projectile : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int type = 0;
    float weight = 0.0f;
    float damage = 0.0f;
    float speed = 0.0f;
    float scale = 0.0f;
    int notrade = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::Projectile;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        case 4:
            return to_string(type);
        case 5:
            { std::stringstream ss; ss << weight; return ss.str(); }
        case 6:
            { std::stringstream ss; ss << damage; return ss.str(); }
        case 7:
            { std::stringstream ss; ss << speed; return ss.str(); }
        case 8:
            { std::stringstream ss; ss << scale; return ss.str(); }
        case 9:
            return to_string(notrade);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name.id = std::stoi(text.string());
            break;
        case 4:
            type = std::stoi(text.string());
            break;
        case 5:
            weight = std::stof(text.string());
            break;
        case 6:
            damage = std::stof(text.string());
            break;
        case 7:
            speed = std::stof(text.string());
            break;
        case 8:
            scale = std::stof(text.string());
            break;
        case 9:
            notrade = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct QuestRewardEquipment : public IObject
{
    IdPtr<QuestReward> questReward;
    IdPtr<Equipment> equipment;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::QuestRewardEquipment;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(questReward);
        case 1:
            return to_string(equipment);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            questReward.id = std::stoi(text.string());
            break;
        case 1:
            equipment.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct QuestRewardGlider : public IObject
{
    IdPtr<QuestReward> questReward;
    IdPtr<Glider> glider;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::QuestRewardGlider;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(questReward);
        case 1:
            return to_string(glider);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            questReward.id = std::stoi(text.string());
            break;
        case 1:
            glider.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct QuestRewardGood : public IObject
{
    IdPtr<QuestReward> questReward;
    IdPtr<Good> good;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::QuestRewardGood;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(questReward);
        case 1:
            return to_string(good);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            questReward.id = std::stoi(text.string());
            break;
        case 1:
            good.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct QuestRewardModificator : public IObject
{
    IdPtr<QuestReward> questReward;
    IdPtr<Modificator> modificator;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::QuestRewardModificator;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(questReward);
        case 1:
            return to_string(modificator);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            questReward.id = std::stoi(text.string());
            break;
        case 1:
            modificator.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct QuestRewardProjectile : public IObject
{
    IdPtr<QuestReward> questReward;
    IdPtr<Projectile> projectile;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::QuestRewardProjectile;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(questReward);
        case 1:
            return to_string(projectile);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            questReward.id = std::stoi(text.string());
            break;
        case 1:
            projectile.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct QuestRewardReputation : public IObject
{
    IdPtr<QuestReward> questReward;
    IdPtr<Clan> clan;
    float reputation = 0.0f;

    virtual EObjectType getType() const
    {
        return EObjectType::QuestRewardReputation;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(questReward);
        case 1:
            return to_string(clan);
        case 2:
            { std::stringstream ss; ss << reputation; return ss.str(); }
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            questReward.id = std::stoi(text.string());
            break;
        case 1:
            clan.id = std::stoi(text.string());
            break;
        case 2:
            reputation = std::stof(text.string());
            break;
        default:
            break;
        }
    }
};

struct QuestRewardWeapon : public IObject
{
    IdPtr<QuestReward> questReward;
    IdPtr<Weapon> weapon;
    int quantity = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::QuestRewardWeapon;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(questReward);
        case 1:
            return to_string(weapon);
        case 2:
            return to_string(quantity);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            questReward.id = std::stoi(text.string());
            break;
        case 1:
            weapon.id = std::stoi(text.string());
            break;
        case 2:
            quantity = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct QuestReward : public IObject
{
    int id = 0;
    int money = 0;
    float rating = 0.0f;

    CVector<Ptr<QuestRewardEquipment>> equipments;
    CVector<Ptr<QuestRewardGlider>> gliders;
    CVector<Ptr<QuestRewardGood>> goods;
    CVector<Ptr<QuestRewardModificator>> modificators;
    CVector<Ptr<QuestRewardProjectile>> projectiles;
    CVector<Ptr<QuestRewardReputation>> reputations;
    CVector<Ptr<QuestRewardWeapon>> weapons;

    virtual EObjectType getType() const
    {
        return EObjectType::QuestReward;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(money);
        case 2:
            { std::stringstream ss; ss << rating; return ss.str(); }
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            money = std::stoi(text.string());
            break;
        case 2:
            rating = std::stof(text.string());
            break;
        default:
            break;
        }
    }
};

struct Quest : public IObject
{
    int id = 0;
    Text text_id;
    IdPtr<String> name;
    IdPtr<String> title;
    IdPtr<String> description;
    IdPtr<QuestReward> reward;
    int time = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::Quest;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(name);
        case 3:
            return to_string(title);
        case 4:
            return to_string(description);
        case 5:
            return to_string(reward);
        case 6:
            return to_string(time);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            name.id = std::stoi(text.string());
            break;
        case 3:
            title.id = std::stoi(text.string());
            break;
        case 4:
            description.id = std::stoi(text.string());
            break;
        case 5:
            reward.id = std::stoi(text.string());
            break;
        case 6:
            time = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct SaveObject : public IObject
{
    IdPtr<Save> save;
    IdPtr<Object> object;
    IdPtr<Map> map;
    IdPtr<Coordinate> coordinate;

    virtual EObjectType getType() const
    {
        return EObjectType::SaveObject;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(save);
        case 1:
            return to_string(object);
        case 2:
            return to_string(map);
        case 3:
            return to_string(coordinate);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            save.id = std::stoi(text.string());
            break;
        case 1:
            object.id = std::stoi(text.string());
            break;
        case 2:
            map.id = std::stoi(text.string());
            break;
        case 3:
            coordinate.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct SavePlayer : public IObject
{
    IdPtr<Save> save;
    IdPtr<Player> player;

    virtual EObjectType getType() const
    {
        return EObjectType::SavePlayer;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(save);
        case 1:
            return to_string(player);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            save.id = std::stoi(text.string());
            break;
        case 1:
            player.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct SaveQuest : public IObject
{
    IdPtr<Save> save;
    IdPtr<Quest> quest;
    int state = 0;

    virtual EObjectType getType() const
    {
        return EObjectType::SaveQuest;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(save);
        case 1:
            return to_string(quest);
        case 2:
            return to_string(state);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            save.id = std::stoi(text.string());
            break;
        case 1:
            quest.id = std::stoi(text.string());
            break;
        case 2:
            state = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct Save : public IObject
{
    int id = 0;
    IdPtr<Modification> modification;
    Text name;
    int date = 0;

    CVector<Ptr<SaveObject>> objects;
    CVector<Ptr<SavePlayer>> players;
    CVector<Ptr<SaveQuest>> quests;

    CVector<Ptr<ScriptVariable>> scriptVariables;

    virtual EObjectType getType() const
    {
        return EObjectType::Save;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(modification);
        case 2:
            return to_string(name);
        case 3:
            return to_string(date);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            modification.id = std::stoi(text.string());
            break;
        case 2:
            name = text.string();
            break;
        case 3:
            date = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

struct ScriptVariable : public IObject
{
    IdPtr<Save> save;
    Text variable;
    Text value;

    virtual EObjectType getType() const
    {
        return EObjectType::ScriptVariable;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(save);
        case 1:
            return to_string(variable);
        case 2:
            return to_string(value);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            save.id = std::stoi(text.string());
            break;
        case 1:
            variable = text.string();
            break;
        case 2:
            value = text.string();
            break;
        default:
            break;
        }
    }
};

enum class LocalizationType : EnumType
{
    ru,
    en,

    max
};

struct String : public IObject
{
    int id = 0;
    Text ru;
    Text en;

    virtual EObjectType getType() const
    {
        return EObjectType::String;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(ru);
        case 2:
            return to_string(en);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            ru = text.string();
            break;
        case 2:
            en = text.string();
            break;
        default:
            break;
        }
    }

    Text get(int loc_id = 0) const { return ((Text *)&ru)[loc_id]; }
};

struct Weapon : public IObject
{
    int id = 0;
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int type = 0;
    int standard = 0;
    float weight = 0.0f;
    float power = 0.0f;
    float firerate = 0.0f;
    float damage = 0.0f;
    float price = 0.0f;
    IdPtr<Projectile> projectile;

    virtual EObjectType getType() const
    {
        return EObjectType::Weapon;
    }
    virtual Text getVariableString(int columnId) const
    {
        switch (columnId)
        {
        case 0:
            return to_string(id);
        case 1:
            return to_string(text_id);
        case 2:
            return to_string(resource);
        case 3:
            return to_string(name);
        case 4:
            return to_string(type);
        case 5:
            return to_string(standard);
        case 6:
            { std::stringstream ss; ss << weight; return ss.str(); }
        case 7:
            { std::stringstream ss; ss << power; return ss.str(); }
        case 8:
            { std::stringstream ss; ss << firerate; return ss.str(); }
        case 9:
            { std::stringstream ss; ss << damage; return ss.str(); }
        case 10:
            { std::stringstream ss; ss << price; return ss.str(); }
        case 11:
            return to_string(projectile);
        default:
            return "";
        }
        return "";
    }
    virtual void setVariableString(int columnId, Text text)
    {
        switch (columnId)
        {
        case 0:
            id = std::stoi(text.string());
            break;
        case 1:
            text_id = text.string();
            break;
        case 2:
            resource = text.string();
            break;
        case 3:
            name.id = std::stoi(text.string());
            break;
        case 4:
            type = std::stoi(text.string());
            break;
        case 5:
            standard = std::stoi(text.string());
            break;
        case 6:
            weight = std::stof(text.string());
            break;
        case 7:
            power = std::stof(text.string());
            break;
        case 8:
            firerate = std::stof(text.string());
            break;
        case 9:
            damage = std::stof(text.string());
            break;
        case 10:
            price = std::stof(text.string());
            break;
        case 11:
            projectile.id = std::stoi(text.string());
            break;
        default:
            break;
        }
    }
};

