/* DO NOT EDIT! This is an autogenerated file. */

#pragma once

#include "../Table.h"
#include "../Types.h"

namespace polygon4
{

namespace detail
{

class Building;
class ClanMechanoid;
class ClanReputation;
class Clan;
class ConfigurationEquipment;
class ConfigurationGood;
class ConfigurationProjectile;
class ConfigurationWeapon;
class Configuration;
class Equipment;
class Glider;
class Good;
class GroupMechanoid;
class Group;
class MapBuildingEquipment;
class MapBuildingGlider;
class MapBuildingGood;
class MapBuildingModificator;
class MapBuildingProjectile;
class MapBuildingWeapon;
class MapBuilding;
class MapGood;
class MapObject;
class Map;
class MechanoidQuest;
class Mechanoid;
class ModificationClan;
class ModificationMap;
class ModificationMechanoid;
class Modification;
class Modificator;
class Object;
class Player;
class Projectile;
class QuestRewardEquipment;
class QuestRewardGlider;
class QuestRewardGood;
class QuestRewardModificator;
class QuestRewardProjectile;
class QuestRewardReputation;
class QuestRewardWeapon;
class QuestReward;
class Quest;
class ScriptVariable;
class Setting;
class String;
class Table;
class Weapon;

class Building : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    float scale = 1;
    float scale_x = 1;
    float scale_y = 1;
    float scale_z = 1;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Building &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Building;
    static const bool has_id = true;

    static const char *getSql();
};

class ClanMechanoid : public IObject
{
    // data
public:
    IdPtr<Clan> clan;
    IdPtr<Mechanoid> mechanoid;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ClanMechanoid &rhs) const;
    IdPtr<Clan> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ClanMechanoid;
    static const bool has_id = false;

    static const char *getSql();
};

class ClanReputation : public IObject
{
    // data
public:
    IdPtr<Clan> clan;
    IdPtr<Clan> clan2;
    float reputation = 0.0f;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ClanReputation &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ClanReputation;
    static const bool has_id = false;

    static const char *getSql();
};

class Clan : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    IdPtr<String> name;
    IdPtr<String> member_name;
    int bonusexp = 0;
    int bonusrepair = 0;
    int bonustrade = 0;
    int helpness = 0;
    float Volatile = 0.0f;
    float noblivion = 0.0f;
    float playereffect = 0.0f;
    int color = 0;

    CTable<ClanMechanoid> mechanoids;
    CTable<ClanReputation> reputations;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Clan &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Clan;
    static const bool has_id = true;

    static const char *getSql();
};

class ConfigurationEquipment : public IObject
{
    // data
public:
    IdPtr<Configuration> configuration;
    IdPtr<Equipment> equipment;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ConfigurationEquipment &rhs) const;
    IdPtr<Configuration> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ConfigurationEquipment;
    static const bool has_id = false;

    static const char *getSql();
};

class ConfigurationGood : public IObject
{
    // data
public:
    IdPtr<Configuration> configuration;
    IdPtr<Good> good;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ConfigurationGood &rhs) const;
    IdPtr<Configuration> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ConfigurationGood;
    static const bool has_id = false;

    static const char *getSql();
};

class ConfigurationProjectile : public IObject
{
    // data
public:
    IdPtr<Configuration> configuration;
    IdPtr<Projectile> projectile;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ConfigurationProjectile &rhs) const;
    IdPtr<Configuration> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ConfigurationProjectile;
    static const bool has_id = false;

    static const char *getSql();
};

class ConfigurationWeapon : public IObject
{
    // data
public:
    IdPtr<Configuration> configuration;
    IdPtr<Weapon> weapon;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ConfigurationWeapon &rhs) const;
    IdPtr<Configuration> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ConfigurationWeapon;
    static const bool has_id = false;

    static const char *getSql();
};

class Configuration : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    IdPtr<String> name;
    IdPtr<Glider> glider;

    CTable<ConfigurationEquipment> equipments;
    CTable<ConfigurationGood> goods;
    CTable<ConfigurationProjectile> projectiles;
    CTable<ConfigurationWeapon> weapons;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Configuration &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Configuration;
    static const bool has_id = true;

    static const char *getSql();
};

class Equipment : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int type = 0;
    int standard = 0;
    float weight = 0.0f;
    float durability = 0.0f;
    float power = 0.0f;
    float value1 = 0.0f;
    float value2 = 0.0f;
    float value3 = 0.0f;
    int manual = 0;
    float price = 0.0f;
    int notrade = 0;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Equipment &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Equipment;
    static const bool has_id = true;

    static const char *getSql();
};

class Glider : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int standard = 0;
    float weight = 0.0f;
    float maxweight = 0.0f;
    float armor = 0.0f;
    int price = 0;
    float restore = 0.0f;
    float power = 0.0f;
    int special = 0;
    float rotatespeed = 0.0f;
    float resfront = 0.0f;
    float restop = 0.0f;
    float resside = 0.0f;
    float stabfront = 0.0f;
    float stabside = 0.0f;
    float careen = 0.0f;
    float delta_t = 0.0f;
    float turbulence = 0.0f;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Glider &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Glider;
    static const bool has_id = true;

    static const char *getSql();
};

class Good : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    Text resource_drop;
    IdPtr<String> name;
    int price = 0;
    float weight = 0.0f;
    int notrade = 0;
    int type = 0;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Good &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Good;
    static const bool has_id = true;

    static const char *getSql();
};

class GroupMechanoid : public IObject
{
    // data
public:
    IdPtr<Group> group;
    IdPtr<Mechanoid> mechanoid;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const GroupMechanoid &rhs) const;
    IdPtr<Group> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::GroupMechanoid;
    static const bool has_id = false;

    static const char *getSql();
};

class Group : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    IdPtr<String> name;

    CTable<GroupMechanoid> mechanoids;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Group &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Group;
    static const bool has_id = true;

    static const char *getSql();
};

class MapBuildingEquipment : public IObject
{
    // data
public:
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Equipment> equipment;
    int quantity = 0;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapBuildingEquipment &rhs) const;
    IdPtr<MapBuilding> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapBuildingEquipment;
    static const bool has_id = false;

    static const char *getSql();
};

class MapBuildingGlider : public IObject
{
    // data
public:
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Glider> glider;
    int quantity = 0;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapBuildingGlider &rhs) const;
    IdPtr<MapBuilding> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapBuildingGlider;
    static const bool has_id = false;

    static const char *getSql();
};

class MapBuildingGood : public IObject
{
    // data
public:
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Good> good;
    int quantity = 0;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapBuildingGood &rhs) const;
    IdPtr<MapBuilding> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapBuildingGood;
    static const bool has_id = false;

    static const char *getSql();
};

class MapBuildingModificator : public IObject
{
    // data
public:
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Modificator> modificator;
    int quantity = 0;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapBuildingModificator &rhs) const;
    IdPtr<MapBuilding> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapBuildingModificator;
    static const bool has_id = false;

    static const char *getSql();
};

class MapBuildingProjectile : public IObject
{
    // data
public:
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Projectile> projectile;
    int quantity = 0;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapBuildingProjectile &rhs) const;
    IdPtr<MapBuilding> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapBuildingProjectile;
    static const bool has_id = false;

    static const char *getSql();
};

class MapBuildingWeapon : public IObject
{
    // data
public:
    IdPtr<MapBuilding> mapBuilding;
    IdPtr<Weapon> weapon;
    int quantity = 0;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapBuildingWeapon &rhs) const;
    IdPtr<MapBuilding> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapBuildingWeapon;
    static const bool has_id = false;

    static const char *getSql();
};

class MapBuilding : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    IdPtr<Map> map;
    IdPtr<Building> building;
    IdPtr<String> name;
    int interactive = 0;
    float x = 0.0f;
    float y = 0.0f;
    float z = 0.0f;
    float roll = 0.0f;
    float pitch = 0.0f;
    float yaw = 0.0f;
    float scale = 1;
    float scale_x = 1;
    float scale_y = 1;
    float scale_z = 1;

    CTable<MapBuildingEquipment> equipments;
    CTable<MapBuildingGlider> gliders;
    CTable<MapBuildingGood> goods;
    CTable<MapBuildingModificator> modificators;
    CTable<MapBuildingProjectile> projectiles;
    CTable<MapBuildingWeapon> weapons;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapBuilding &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapBuilding;
    static const bool has_id = true;

    static const char *getSql();
};

class MapGood : public IObject
{
    // data
private:
    int id = 0;
public:
    int text_id = 0;
    IdPtr<Map> map;
    IdPtr<Good> good;
    float x = 0.0f;
    float y = 0.0f;
    float z = 0.0f;
    float roll = 0.0f;
    float pitch = 0.0f;
    float yaw = 0.0f;
    float scale = 0.0f;
    float scale_x = 0.0f;
    float scale_y = 0.0f;
    float scale_z = 0.0f;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapGood &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapGood;
    static const bool has_id = true;

    static const char *getSql();
};

class MapObject : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    IdPtr<Map> map;
    IdPtr<Object> object;
    float x = 0.0f;
    float y = 0.0f;
    float z = 0.0f;
    float roll = 0.0f;
    float pitch = 0.0f;
    float yaw = 0.0f;
    float scale = 1;
    float scale_x = 1;
    float scale_y = 1;
    float scale_z = 1;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MapObject &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MapObject;
    static const bool has_id = true;

    static const char *getSql();
};

class Map : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    IdPtr<String> name;
    float h_min = 0.0f;
    float h_max = 0.0f;
    float kx = 0.0f;
    float bx = 0.0f;
    float ky = 0.0f;
    float by = 0.0f;

    CTable<MapBuilding> buildings;
    CTable<MapGood> goods;
    CTable<MapObject> objects;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Map &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Map;
    static const bool has_id = true;

    static const char *getSql();
};

class MechanoidQuest : public IObject
{
    // data
public:
    IdPtr<Mechanoid> mechanoid;
    IdPtr<Quest> quest;
    int state = 0;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const MechanoidQuest &rhs) const;
    IdPtr<Mechanoid> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::MechanoidQuest;
    static const bool has_id = false;

    static const char *getSql();
};

class Mechanoid : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    IdPtr<String> name;
    int generation = 0;
    float rating = 0.0f;
    float money = 0.0f;
    IdPtr<Configuration> configuration;
    IdPtr<Group> group;
    IdPtr<Clan> clan;
    float rating_fight = 0.0f;
    float rating_courier = 0.0f;
    float rating_trade = 0.0f;
    IdPtr<Map> map;
    IdPtr<MapBuilding> mapBuilding;
    float x = 0.0f;
    float y = 0.0f;
    float z = 0.0f;
    float roll = 0.0f;
    float pitch = 0.0f;
    float yaw = 0.0f;

    CTable<MechanoidQuest> quests;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Mechanoid &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Mechanoid;
    static const bool has_id = true;

    static const char *getSql();
};

class ModificationClan : public IObject
{
    // data
public:
    IdPtr<Modification> modification;
    IdPtr<Clan> clan;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ModificationClan &rhs) const;
    IdPtr<Modification> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ModificationClan;
    static const bool has_id = false;

    static const char *getSql();
};

class ModificationMap : public IObject
{
    // data
public:
    IdPtr<Modification> modification;
    IdPtr<Map> map;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ModificationMap &rhs) const;
    IdPtr<Modification> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ModificationMap;
    static const bool has_id = false;

    static const char *getSql();
};

class ModificationMechanoid : public IObject
{
    // data
public:
    IdPtr<Modification> modification;
    IdPtr<Mechanoid> mechanoid;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ModificationMechanoid &rhs) const;
    IdPtr<Modification> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ModificationMechanoid;
    static const bool has_id = false;

    static const char *getSql();
};

class Modification : public IObject
{
    // data
private:
    int id = 0;
public:
    IdPtr<String> name;
    Text directory;
    Text author;
    Text date_created;
    Text date_modified;
    Text comment;
    Text version;
    Text script_language;
    Text script_main;
    IdPtr<Mechanoid> player_mechanoid;
    IdPtr<Configuration> cooperative_player_configuration;

    CTable<ModificationClan> clans;
    CTable<ModificationMap> maps;
    CTable<ModificationMechanoid> mechanoids;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Modification &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Modification;
    static const bool has_id = true;

    static const char *getSql();
};

class Modificator : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    IdPtr<String> name;
    float probability = 0.0f;
    float price = 0.0f;
    float k_price = 0.0f;
    float k_param1 = 0.0f;
    float k_param2 = 0.0f;
    int unicum_id = 0;
    int mask = 0;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Modificator &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Modificator;
    static const bool has_id = true;

    static const char *getSql();
};

class Object : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int type = 0;
    float scale = 1;
    float scale_x = 1;
    float scale_y = 1;
    float scale_z = 1;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Object &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Object;
    static const bool has_id = true;

    static const char *getSql();
};

class Player : public IObject
{
    // data
private:
    int id = 0;
public:
    IdPtr<Mechanoid> mechanoid;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Player &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Player;
    static const bool has_id = true;

    static const char *getSql();
};

class Projectile : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    IdPtr<String> name;
    int type = 0;
    float weight = 0.0f;
    float damage = 0.0f;
    Text T;
    float speed = 0.0f;
    float scale = 0.0f;
    int numstate = 0;
    float rotate = 0.0f;
    int subtype = 0;
    float life_time = 0.0f;
    float detonation_delay = 0.0f;
    float distance_detonation = 0.0f;
    float strength = 0.0f;
    float price = 0.0f;
    int notrade = 0;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Projectile &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Projectile;
    static const bool has_id = true;

    static const char *getSql();
};

class QuestRewardEquipment : public IObject
{
    // data
public:
    IdPtr<QuestReward> questReward;
    IdPtr<Equipment> equipment;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const QuestRewardEquipment &rhs) const;
    IdPtr<QuestReward> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::QuestRewardEquipment;
    static const bool has_id = false;

    static const char *getSql();
};

class QuestRewardGlider : public IObject
{
    // data
public:
    IdPtr<QuestReward> questReward;
    IdPtr<Glider> glider;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const QuestRewardGlider &rhs) const;
    IdPtr<QuestReward> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::QuestRewardGlider;
    static const bool has_id = false;

    static const char *getSql();
};

class QuestRewardGood : public IObject
{
    // data
public:
    IdPtr<QuestReward> questReward;
    IdPtr<Good> good;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const QuestRewardGood &rhs) const;
    IdPtr<QuestReward> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::QuestRewardGood;
    static const bool has_id = false;

    static const char *getSql();
};

class QuestRewardModificator : public IObject
{
    // data
public:
    IdPtr<QuestReward> questReward;
    IdPtr<Modificator> modificator;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const QuestRewardModificator &rhs) const;
    IdPtr<QuestReward> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::QuestRewardModificator;
    static const bool has_id = false;

    static const char *getSql();
};

class QuestRewardProjectile : public IObject
{
    // data
public:
    IdPtr<QuestReward> questReward;
    IdPtr<Projectile> projectile;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const QuestRewardProjectile &rhs) const;
    IdPtr<QuestReward> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::QuestRewardProjectile;
    static const bool has_id = false;

    static const char *getSql();
};

class QuestRewardReputation : public IObject
{
    // data
public:
    IdPtr<QuestReward> questReward;
    IdPtr<Clan> clan;
    float reputation = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const QuestRewardReputation &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::QuestRewardReputation;
    static const bool has_id = false;

    static const char *getSql();
};

class QuestRewardWeapon : public IObject
{
    // data
public:
    IdPtr<QuestReward> questReward;
    IdPtr<Weapon> weapon;
    int quantity = 1;

    // functions
public:
    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const QuestRewardWeapon &rhs) const;
    IdPtr<QuestReward> operator->() const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::QuestRewardWeapon;
    static const bool has_id = false;

    static const char *getSql();
};

class QuestReward : public IObject
{
    // data
private:
    int id = 0;
public:
    IdPtr<Quest> quest;
    Text text_id;
    int money = 0;
    float rating = 0.0f;

    CTable<QuestRewardEquipment> equipments;
    CTable<QuestRewardGlider> gliders;
    CTable<QuestRewardGood> goods;
    CTable<QuestRewardModificator> modificators;
    CTable<QuestRewardProjectile> projectiles;
    CTable<QuestRewardReputation> reputations;
    CTable<QuestRewardWeapon> weapons;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const QuestReward &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::QuestReward;
    static const bool has_id = true;

    static const char *getSql();
};

class Quest : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    IdPtr<String> name;
    IdPtr<String> title;
    IdPtr<String> description;
    int time = 0;

    CTable<QuestReward> rewards;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Quest &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Quest;
    static const bool has_id = true;

    static const char *getSql();
};

class ScriptVariable : public IObject
{
    // data
private:
    int id = 0;
public:
    Text variable;
    int value_int = 0;
    float value_float = 0.0f;
    Text value_text;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const ScriptVariable &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::ScriptVariable;
    static const bool has_id = true;

    static const char *getSql();
};

class Setting : public IObject
{
    // data
private:
    int id = 0;
public:
    IdPtr<Player> player;
    int value_int = 0;
    float value_float = 0.0f;
    Text value_text;
    Blob value_blob;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Setting &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Setting;
    static const bool has_id = true;

    static const char *getSql();
};

enum class LocalizationType : EnumType
{
    ru,
    en,

    max,
};

class String : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    IdPtr<Table> table;
    Text ru;
    Text en;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const String &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::String;
    static const bool has_id = true;

    static const char *getSql();
};

class Table : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Table &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Table;
    static const bool has_id = true;

    static const char *getSql();
};

class Weapon : public IObject
{
    // data
private:
    int id = 0;
public:
    Text text_id;
    Text resource;
    IdPtr<String> name;
    IdPtr<Projectile> projectile;
    int type = 0;
    int standard = 0;
    float weight = 0.0f;
    float power = 0.0f;
    float firerate = 0.0f;
    float damage = 0.0f;
    float price = 0.0f;
    float fx = 0.0f;
    int shoottype = 0;
    float shootscale = 0.0f;
    int xstate = 0;
    float rcolor = 0.0f;
    float gcolor = 0.0f;
    float bcolor = 0.0f;
    int typearms = 0;
    float tfire = 0.0f;
    int vtype = 0;
    float spare = 0.0f;
    float reconstruction = 0.0f;
    float maxdistance = 0.0f;
    float angle = 0.0f;
    float fxtime = 0.0f;
    int damagetype = 0;
    float fxmodeltime = 0.0f;
    float inside_mul = 0.0f;
    float inside_x = 0.0f;
    float inside_y = 0.0f;
    float inside_z = 0.0f;
    int notrade = 0;

    // functions
public:
    int getId() const;
    void setId(int id);

    virtual EObjectType getType() const;
    virtual Text getVariableString(int columnId) const;
    virtual void setVariableString(int columnId, Text text, Ptr<IObject> ptr = Ptr<IObject>());
#ifdef USE_QT
    virtual QTreeWidgetItem *printQtTreeView(QTreeWidgetItem *parent) const;
#endif
    virtual Text getName() const;

    bool operator==(const Weapon &rhs) const;

private:
    friend class StorageImpl;
    template <class T> friend struct IdPtr;
    template <class T> friend class CTable;

public:
    static const EObjectType object_type = EObjectType::Weapon;
    static const bool has_id = true;

    static const char *getSql();
};

} // namespace detail

} // namespace polygon4
