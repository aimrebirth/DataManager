#
# Polygon-4 Data Scheme
#
#  author: lzwdgc
#

# TODO:

################################################################################
#
# globals
#
################################################################################

globals
{
    version: "31"
};

types
{
    i32 -> int32_t;
    u32 -> uint32_t;
    f32 -> float;
    bool -> bool;

    str -> Text;
    blob -> Blob;

    date -> i32;

    Quantity -> i32;

    Price -> f32;
    Money -> Price;
    Weight -> f32;
    Damage -> f32;
    RatingType -> f32;
    Reputation -> f32;

    Resource -> str;

    IP -> str;
};

database sqlite3
{
    types
    {
        bool -> Integer;
        int32_t -> Integer;
        uint32_t -> Integer;
        float -> Real;
        Text -> Text;
        Blob -> Blob;
    };
};

################################################################################
#
# enums
#
################################################################################

enum EObjectType
{
    None = 0 { not_in_table; default; },
    Building = 1,
    BuildingDescription = 2,
    Clan = 4,
    ClanDescription,
    Equipment = 10,
    EquipmentDescription,
    Glider = 11,
    GliderDescription,
    Good = 12,
    GoodDescription,
    Group = 14,
    GroupMechanoid,
    Map = 24,
    MapBuildingNameEnding,
    MapBuildingDescription,
    MessageTitleDescription,
    MessageTextDescription,
    Modification = 26,
    ModificationMapDescription,
    ModificatorDescription,
    Projectile = 34,
    ProjectileDescription,
    QuestDescription,
    QuestText,
    QuestTitle,
    Weapon = 48,
    WeaponDescription,
    Any = 1000,

    # other values
    InlineVariables { not_in_table; },

    properties
    {
        ending: "s";
    }
};

enum QuestState
{
    None { not_in_table; default; },
    Started,
    Completed,
    Abandoned,
    Failed,
};

enum Standard
{
    None { not_in_table; },
    Standard1 { default; },
    Standard2,
    Standard3,
    Standard4,
    Universal,
    Other,
};

enum WeaponType
{
    Light { default; },
    Heavy,
    RocketLauncher,
    BombLauncher,
};

enum PlayerType
{
    Internet = 1,
    Local = 0 { default; },
};

enum MessageType
{
    Info,
    Text,
    Message,
    Packet,
};

enum ScriptLanguage
{
    None { not_in_table; },
    Lua { default; },
};

enum JournalRecordType
{
    None { default; not_in_table; },
    InProgress,
    Completed,
    Failed,
};

enum QuestRecordType
{
    None { default; not_in_table; },
    InProgress,
    Completed,
    Failed,
};

################################################################################
#
# classes
#
################################################################################

################################################################################
# service
################################################################################

class None
{
    properties
    {
        enum_only;
        first;
    }
};

class Any
{
    properties
    {
        enum_only;
        last;
        name: "AnyTable";
    }
};

########################################

class Location
{
    f32 x;
    f32 y;
    f32 z;

    properties
    {
        service;
        inline;
    }
};

########################################

class Rotation
{
    f32 roll;
    f32 pitch;
    f32 yaw;

    properties
    {
        service;
        inline;
    }
};

########################################

class Scale
{
    f32 scale = 1;
    f32 scale_x = 1;
    f32 scale_y = 1;
    f32 scale_z = 1;

    properties
    {
        service;
        inline;
    }
};

########################################

class Coordinate
{
    Location location;
    Rotation rotation;

    properties
    {
        service;
        inline;
    }
};

########################################

class Rating
{
    RatingType rating;
    RatingType rating_fight;
    RatingType rating_courier;
    RatingType rating_trade;

    properties
    {
        service;
        inline;
    }
};

########################################

class Value
{
    i32 value_int;
    f32 value_float;
    str value_text;

    properties
    {
        service;
        inline;
    }
};

class ValueWithBlob
{
    Value value;
    blob value_blob;

    properties
    {
        service;
        inline;
    }
};

########################################

class LocalizedString
{
    str ru { big_edit; };
    str en { big_edit; };

    properties
    {
        service;
        prefixed;
    }
};

########################################

class DbSetting
{
    str key { pk; };
    Value value;

    properties
    {
        service;
        service_db;
        object_name: "key";
        no_save;
    }
};

################################################################################
# real
################################################################################

class String
{
    i32 id { pk; };
    str text_id;
    EObjectType object = "EObjectType::None";
    LocalizedString string;

    properties
    {
        tree_view;
        object_name: "string";
        split_by: object;
    }
};

########################################

class Building
{
    i32 id { pk; };
    str text_id;
    String name;
    String description { enum_type: BuildingDescription; inline; initial_value: [ object: BuildingDescription; ]; };
    Resource resource;

    Scale scale;
    Rotation rotation;

    properties
    {
        tree_view;
    }
};

########################################

class Equipment
{
    i32 id { pk; };
    str text_id;
    String name;
    String description { enum_type: EquipmentDescription; inline; initial_value: [ object: EquipmentDescription; ]; };
    Resource resource;

    i32 type;
    Standard standard;
    Weight weight;
    f32 durability;
    f32 power;
    f32 value1;
    f32 value2;
    f32 value3;
    bool manual;
    Price price;
    i32 max_count = 1;
    bool notrade;

    properties
    {
        tree_view;
        split_by: standard;
    }
};

########################################

class Glider
{
    i32 id { pk; };
    str text_id;
    String name;
    String description { enum_type: GliderDescription; inline; initial_value: [ object: GliderDescription; ]; };
    Resource resource;

    Standard standard;
    Weight weight;
    Weight maxweight;
    f32 armor;
    Price price;
    f32 restore;
    f32 power;
    bool special;
    f32 rotatespeed;

    f32 resfront;
    f32 restop;
    f32 resside;

    f32 stabfront;
    f32 stabside;

    f32 careen;
    f32 delta_t;
    f32 turbulence;

    Scale scale;

    properties
    {
        tree_view;
        split_by: standard;
    }
};

########################################

class Good
{
    i32 id { pk; };
    str text_id;
    String name;
    String description { enum_type: GoodDescription; inline; initial_value: [ object: GoodDescription; ]; };
    Resource resource;
    Resource resource_drop;

    Price price;
    Weight weight;
    bool notrade;
    i32 type;
    i32 max_count = 1;

    properties
    {
        tree_view;
    }
};

########################################

class Object
{
    i32 id { pk; };
    str text_id;
    String name;
    Resource resource;

    i32 type;
    Scale scale;
    Rotation rotation;

    properties
    {
        tree_view;
    }
};

########################################

class Player
{
    i32 id { pk; };
    str nickname;
    PlayerType type;
    IP ip;

    Setting settings { container; };
    ModificationPlayer modifications
    {
        container;
        read_only;
        no_children;
        object_name: "modification";
    };

    properties
    {
        object_name: "nickname";
        tree_view;
    }
};

class ModificationPlayer
{
    i32 id { pk; };
    Modification modification;
    Player player;

    Mechanoid mechanoid
    {
        getOrderedObjectMap: "modification->mechanoids";
    };

    JournalRecord records { container; };
    QuestRecord quests { container; };
    ScriptVariable variables { container; };

    properties
    {
        object_name: "to_string(player)";
        parent: Modification;
    }
};

########################################

class Setting
{
    i32 id { pk; };
    Player player;
    str key;
    ValueWithBlob value;

    properties
    {
        object_name: "key";
        parent: Player;
    }
};

########################################

class JournalRecord
{
    i32 id { pk; };
    ModificationPlayer player;
    Message message;
    date date;
    JournalRecordType type;

    properties
    {
        object_name: "to_string(message)";
        parent: ModificationPlayer;
    }
};

class QuestRecord
{
    i32 id { pk; };
    ModificationPlayer player;
    Quest quest;
    date date;
    QuestRecordType type;

    properties
    {
        object_name: "to_string(quest)";
        parent: ModificationPlayer;
    }
};

class ScriptVariable
{
    i32 id { pk; };
    ModificationPlayer player;
    str variable;
    Value value;

    properties
    {
        object_name: "variable";
        parent: ModificationPlayer;
    }
};

########################################

class Message
{
    i32 id { pk; };
    str text_id;
    MessageType type;
    String title { enum_type: MessageTitleDescription; inline; initial_value: [ object: MessageTitleDescription; ]; };
    String txt { enum_type: MessageTextDescription; inline; initial_value: [ object: MessageTextDescription; ]; };

    properties
    {
        object_name: "text_id";
        tree_view;
        split_by: type;
    }
};

########################################

class Projectile
{
    i32 id { pk; };
    str text_id;
    String name;
    String description { enum_type: ProjectileDescription; inline; initial_value: [ object: ProjectileDescription; ]; };
    Resource resource;

    i32 type;
    i32 subtype;
    Weight weight;
    Damage damage;
    f32 T;
    f32 speed;
    f32 scale;
    i32 numstate;
    f32 rotate;
    f32 life_time;
    f32 detonation_delay;
    f32 distance_detonation;
    f32 strength;
    Price price;
    bool notrade;

    properties
    {
        tree_view;
    }
};

########################################

class Weapon
{
    i32 id { pk; };
    str text_id;
    String name;
    String description { enum_type: WeaponDescription; inline; initial_value: [ object: WeaponDescription; ]; };
    Resource resource;

    WeaponType type;
    Projectile projectile;
    Standard standard;
    Weight weight;
    f32 power;
    f32 firerate;
    Damage damage;
    Price price;
    f32 fx;
    i32 shoottype;
    f32 shootscale;
    i32 xstate;

    f32 rcolor;
    f32 gcolor;
    f32 bcolor;

    i32 typearms;
    f32 tfire;
    i32 vtype;
    f32 spare;
    f32 reconstruction;
    f32 maxdistance;
    f32 angle;
    f32 fxtime;
    i32 damagetype;
    f32 fxmodeltime;

    f32 inside_mul;
    f32 inside_x;
    f32 inside_y;
    f32 inside_z;

    bool notrade;

    properties
    {
        tree_view;
        split_by: standard;
    }
};

########################################

class Mechanoid
{
    i32 id { pk; };
    str text_id;
    String name;

    Modification modification;
    ModificationMap map
    {
        getOrderedObjectMap: "modification->maps";
    };
    Clan clan
    {
        getOrderedObjectMap: "modification->clans";
    };
    ModificationMapBuilding building
    {
        getOrderedObjectMap: "map ? map->buildings : m";
    };
    Configuration initial_configuration;
    Configuration configuration;
    Group group
    {
        getOrderedObjectMap: "modification->groups";
    };
    i32 generation;
    Money money;
    Rating rating;
    Coordinate coordinate;
    bool enabled = true;

    MechanoidQuest quests { container; };

    properties
    {
        parent: Modification;
    }
};

########################################

class Map
{
    i32 id { pk; };
    str text_id;
    String name;
    Resource resource;

    f32 h_min;
    f32 h_max;
    f32 kx;
    f32 bx;
    f32 ky;
    f32 by;

    Blob heightmap;

    MapBuilding buildings { container; };
    MapGood goods { container; };
    MapObject objects { container; };

    properties
    {
        names_order: "text name custom parent";
        tree_view;
    }
};

########################################

class Modification
{
    i32 id { pk; };
    String name;

    str directory;
    str author;
    str date_created;
    str date_modified;
    str comment;
    str version;
    ScriptLanguage script_language;
    str script_main;

    Player player;
    Configuration cooperative_player_configuration;

    ModificationMap maps { container; };
    Clan clans { container; };
    Mechanoid mechanoids { container; };
    Group groups { container; };
    ModificationPlayer players { container; };

    properties
    {
        tree_view;
    }
};

class ModificationMap
{
    i32 id { pk; };
    str text_id;

    Modification modification { pk; };
    Map map { pk; };

    String description { enum_type: ModificationMapDescription; inline; initial_value: [ object: ModificationMapDescription; ]; };

    str script_dir;
    str script_name;

    # containers
    ModificationMapBuilding buildings { container; };

    properties
    {
        parent: Modification;
        object_name: "to_string(map)";
    }
};

class ModificationMapBuilding
{
    i32 id { pk; };
    str text_id;

    ModificationMap map { pk; };
    MapBuilding building
    {
        pk;
        getOrderedObjectMap: "map->map->buildings";
    };

    String name { enum_type: Building; };
    String name_ending { enum_type: MapBuildingNameEnding; initial_value: [ object: MapBuildingNameEnding; ]; };
    String description { enum_type: MapBuildingDescription; inline; initial_value: [ object: MapBuildingDescription; ]; };

    str script_name;

    bool interactive;

    Clan clan
    {
        getOrderedObjectMap: "map->modification->clans";
    };

    MapBuildingEquipment equipments { container; };
    MapBuildingGlider gliders { container; };
    MapBuildingGood goods { container; };
    MapBuildingModificator modificators { container; };
    MapBuildingProjectile projectiles { container; };
    MapBuildingWeapon weapons { container; };

    ModificationMapBuildingMechanoid mechanoids { container; };

    properties
    {
        parent: ModificationMap;

        object_name: "(name ? to_string(name) : to_string(building)) + (name_ending ? (Text(\" \") + to_string(name_ending)) : Text())";
        names_order: "custom name text parent";
    }
};

class ModificationMapBuildingMechanoid
{
    ModificationMapBuilding building { pk; };
    Mechanoid mechanoid { pk; };

    properties
    {
        parent: ModificationMapBuilding;
        child: Mechanoid;
        proxy;
    }
};

########################################

class Modificator
{
    i32 id { pk; };
    str text_id;
    String name;
    String description { enum_type: ModificatorDescription; inline; initial_value: [ object: ModificatorDescription; ]; };
    Resource resource;

    f32 probability;
    Price price;
    f32 k_price;
    f32 k_param1;
    f32 k_param2;
    i32 unicum_id;
    i32 mask;
    i32 max_count = 1;

    properties
    {
        tree_view;
    }
};

########################################
# Configuration
########################################

class Configuration
{
    i32 id { pk; };
    str text_id;
    String name;
    Glider glider;

    ConfigurationEquipment equipments { container; };
    ConfigurationGood goods { container; };
    ConfigurationModificator modificators { container; };
    ConfigurationProjectile projectiles { container; };
    ConfigurationWeapon weapons { container; };

    properties
    {
        tree_view;
    }
};

class ConfigurationEquipment
{
    Configuration configuration;
    Equipment equipment;

    Quantity quantity = 1;

    properties
    {
        parent: Configuration;
        child: Equipment;
        proxy;
    }
};

class ConfigurationGood
{
    Configuration configuration;
    Good good;

    Quantity quantity = 1;

    properties
    {
        parent: Configuration;
        child: Good;
        proxy;
    }
};

class ConfigurationModificator
{
    Configuration configuration;
    Modificator modificator;

    Quantity quantity = 1;

    properties
    {
        parent: Configuration;
        child: Modificator;
        proxy;
    }
};

class ConfigurationProjectile
{
    Configuration configuration;
    Projectile projectile;

    Quantity quantity = 1;

    properties
    {
        parent: Configuration;
        child: Projectile;
        proxy;
    }
};

class ConfigurationWeapon
{
    Configuration configuration;
    Weapon weapon;

    Quantity quantity = 1;

    properties
    {
        parent: Configuration;
        child: Weapon;
        proxy;
    }
};

########################################
# Quest
########################################

class Quest
{
    i32 id { pk; };
    str text_id;
    String name;

    String title            { enum_type: QuestTitle; inline; initial_value: [ object: QuestTitle; ]; };
    String description      { enum_type: QuestDescription; inline; initial_value: [ object: QuestDescription; ]; };

    i32 time;

    Money money;
    Rating rating;

    QuestRewardEquipment equipments { container; subtree_item: "Rewards"; };
    QuestRewardGlider gliders { container; subtree_item: "Rewards"; };
    QuestRewardGood goods { container; subtree_item: "Rewards"; };
    QuestRewardModificator modificators { container; subtree_item: "Rewards"; };
    QuestRewardProjectile projectiles { container; subtree_item: "Rewards"; };
    QuestRewardReputation reputations { container; subtree_item: "Rewards"; };
    QuestRewardWeapon weapons { container; subtree_item: "Rewards"; };

    QuestString strings
    {
        container;
        array;
        array_key: text_id;
    };

    properties
    {
        tree_view;
    }
};

class QuestString
{
    Quest quest;
    str text_id;
    LocalizedString string;

    properties
    {
        parent: Quest;
        object_name: "string";
    }
};

class QuestRewardEquipment
{
    Quest quest;
    Equipment equipment;

    Quantity quantity = 1;

    properties
    {
        parent: Quest;
        child: Equipment;
        proxy;
    }
};

class QuestRewardGlider
{
    Quest quest;
    Glider glider;

    Quantity quantity = 1;

    properties
    {
        parent: Quest;
        child: Glider;
        proxy;
    }
};

class QuestRewardGood
{
    Quest quest;
    Good good;

    Quantity quantity = 1;

    properties
    {
        parent: Quest;
        child: Good;
        proxy;
    }
};

class QuestRewardModificator
{
    Quest quest;
    Modificator modificator;

    Quantity quantity = 1;

    properties
    {
        parent: Quest;
        child: Modificator;
        proxy;
    }
};

class QuestRewardProjectile
{
    Quest quest;
    Projectile projectile;

    Quantity quantity = 1;

    properties
    {
        parent: Quest;
        child: Projectile;
        proxy;
    }
};

class QuestRewardReputation
{
    Quest quest;
    Clan clan;

    Reputation quantity = 1;

    properties
    {
        parent: Quest;
        child: Clan;

        proxy;
    }
};

class QuestRewardWeapon
{
    Quest quest;
    Weapon weapon;

    Quantity quantity = 1;

    properties
    {
        parent: Quest;
        child: Weapon;
        proxy;
    }
};

########################################

class Clan
{
    i32 id { pk; };
    str text_id;
    String name;
    String member_name;
    String description { enum_type: ClanDescription; inline; initial_value: [ object: ClanDescription; ]; };
    Resource resource;

    Modification modification;

    ClanMechanoid leader
    {
        getOrderedObjectMap: "mechanoids";
    };

    i32 bonusexp;
    i32 bonusrepair;
    i32 bonustrade;

    i32 helpness;
    f32 Volatile;
    f32 noblivion;
    f32 playereffect;
    i32 color;

    ClanMechanoid mechanoids { container; };
    ClanReputation reputations { container; };

    properties
    {
        parent: Modification;
    }
};

class ClanMechanoid
{
    Clan clan;
    Mechanoid mechanoid
    {
        getOrderedObjectMap: "clan->modification->mechanoids";
    };

    properties
    {
        parent: Clan;
        child: Mechanoid;
        proxy;
    }
};

class ClanReputation
{
    Clan clan1;
    Clan clan2
    {
        getOrderedObjectMap: "clan1->modification->clans";
    };
    Reputation reputation;

    properties
    {
        parent_var: clan1;
        child_var: clan2;
        proxy;
    }
};

########################################

class Group
{
    i32 id { pk; };
    str text_id;
    String name;

    Modification modification;

    GroupMechanoid mechanoids { container; };

    properties
    {
        parent: Modification;
    }
};

class GroupMechanoid
{
    Group group;
    Mechanoid mechanoid
    {
        getOrderedObjectMap: "group->modification->mechanoids";
    };

    properties
    {
        parent: Group;
        child: Mechanoid;
        proxy;
    }
};

########################################

class MechanoidQuest
{
    Mechanoid mechanoid;
    Quest quest;

    QuestState state;

    properties
    {
        parent: Mechanoid;
        child: Quest;
        proxy;
    }
};

########################################

class MapObject
{
    i32 id { pk; };
    str text_id;

    Map map;
    Object object;

    Coordinate coordinate;
    Scale scale;

    bool interactive;

    properties
    {
        object_name: "to_string(object)";
        parent: Map;
    }
};

########################################

class MapGood
{
    i32 id { pk; };
    str text_id;

    Map map;
    Good good;

    Coordinate coordinate;
    Scale scale;

    properties
    {
        object_name: "to_string(good)";
        parent: Map;
    }
};

########################################

class MapBuilding
{
    i32 id { pk; };
    str text_id;

    Map map;
    Building building;

    Coordinate coordinate;
    Scale scale;

    properties
    {
        parent: Map;
        object_name: "to_string(building)";
    }
};

########################################

class MapBuildingEquipment
{
    ModificationMapBuilding map_building;
    Equipment equipment;

    Quantity quantity = 1;

    properties
    {
        parent: ModificationMapBuilding;
        child: Equipment;
        proxy;
    }
};

class MapBuildingGlider
{
    ModificationMapBuilding map_building;
    Glider glider;

    Quantity quantity = 1;

    properties
    {
        parent: ModificationMapBuilding;
        child: Glider;
        proxy;
    }
};

class MapBuildingGood
{
    ModificationMapBuilding map_building;
    Good good;

    Quantity quantity = 1;

    properties
    {
        parent: ModificationMapBuilding;
        child: Good;
        proxy;
    }
};

class MapBuildingModificator
{
    ModificationMapBuilding map_building;
    Modificator modificator;

    Quantity quantity = 1;

    properties
    {
        parent: ModificationMapBuilding;
        child: Modificator;
        proxy;
    }
};

class MapBuildingProjectile
{
    ModificationMapBuilding map_building;
    Projectile projectile;

    Quantity quantity = 1;

    properties
    {
        parent: ModificationMapBuilding;
        child: Projectile;
        proxy;
    }
};

class MapBuildingWeapon
{
    ModificationMapBuilding map_building;
    Weapon weapon;

    Quantity quantity = 1;

    properties
    {
        parent: ModificationMapBuilding;
        child: Weapon;
        proxy;
    }
};

################################################################################
