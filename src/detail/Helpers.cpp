/* DO NOT EDIT! This is an autogenerated file. */

std::map<std::string, EObjectType> types =
{
    { "Nones", EObjectType::None },
    { "Buildings", EObjectType::Building },
    { "Clans", EObjectType::Clan },
    { "ClanReputations", EObjectType::ClanReputation },
    { "Configurations", EObjectType::Configuration },
    { "ConfigurationEquipments", EObjectType::ConfigurationEquipment },
    { "ConfigurationGoods", EObjectType::ConfigurationGood },
    { "ConfigurationProjectiles", EObjectType::ConfigurationProjectile },
    { "ConfigurationWeapons", EObjectType::ConfigurationWeapon },
    { "Equipments", EObjectType::Equipment },
    { "Gliders", EObjectType::Glider },
    { "Goods", EObjectType::Good },
    { "Groups", EObjectType::Group },
    { "GroupMechanoids", EObjectType::GroupMechanoid },
    { "Maps", EObjectType::Map },
    { "MapBuildings", EObjectType::MapBuilding },
    { "MapBuildingEquipments", EObjectType::MapBuildingEquipment },
    { "MapBuildingGliders", EObjectType::MapBuildingGlider },
    { "MapBuildingGoods", EObjectType::MapBuildingGood },
    { "MapBuildingModificators", EObjectType::MapBuildingModificator },
    { "MapBuildingProjectiles", EObjectType::MapBuildingProjectile },
    { "MapBuildingWeapons", EObjectType::MapBuildingWeapon },
    { "MapGoods", EObjectType::MapGood },
    { "MapObjects", EObjectType::MapObject },
    { "Mechanoids", EObjectType::Mechanoid },
    { "MechanoidQuests", EObjectType::MechanoidQuest },
    { "Modifications", EObjectType::Modification },
    { "ModificationMaps", EObjectType::ModificationMap },
    { "Modificators", EObjectType::Modificator },
    { "Objects", EObjectType::Object },
    { "Players", EObjectType::Player },
    { "Projectiles", EObjectType::Projectile },
    { "Quests", EObjectType::Quest },
    { "QuestRewards", EObjectType::QuestReward },
    { "QuestRewardEquipments", EObjectType::QuestRewardEquipment },
    { "QuestRewardGliders", EObjectType::QuestRewardGlider },
    { "QuestRewardGoods", EObjectType::QuestRewardGood },
    { "QuestRewardModificators", EObjectType::QuestRewardModificator },
    { "QuestRewardProjectiles", EObjectType::QuestRewardProjectile },
    { "QuestRewardReputations", EObjectType::QuestRewardReputation },
    { "QuestRewardWeapons", EObjectType::QuestRewardWeapon },
    { "ScriptVariables", EObjectType::ScriptVariable },
    { "Settings", EObjectType::Setting },
    { "Strings", EObjectType::String },
    { "Tables", EObjectType::Table },
    { "Weapons", EObjectType::Weapon },
    { "Anys", EObjectType::Any },
};

EObjectType getTableType(const std::string &table)
{
    return types[table];
}

std::map<EObjectType, Text> tables =
{
    { EObjectType::None, "Nones" },
    { EObjectType::Building, "Buildings" },
    { EObjectType::Clan, "Clans" },
    { EObjectType::ClanReputation, "ClanReputations" },
    { EObjectType::Configuration, "Configurations" },
    { EObjectType::ConfigurationEquipment, "ConfigurationEquipments" },
    { EObjectType::ConfigurationGood, "ConfigurationGoods" },
    { EObjectType::ConfigurationProjectile, "ConfigurationProjectiles" },
    { EObjectType::ConfigurationWeapon, "ConfigurationWeapons" },
    { EObjectType::Equipment, "Equipments" },
    { EObjectType::Glider, "Gliders" },
    { EObjectType::Good, "Goods" },
    { EObjectType::Group, "Groups" },
    { EObjectType::GroupMechanoid, "GroupMechanoids" },
    { EObjectType::Map, "Maps" },
    { EObjectType::MapBuilding, "MapBuildings" },
    { EObjectType::MapBuildingEquipment, "MapBuildingEquipments" },
    { EObjectType::MapBuildingGlider, "MapBuildingGliders" },
    { EObjectType::MapBuildingGood, "MapBuildingGoods" },
    { EObjectType::MapBuildingModificator, "MapBuildingModificators" },
    { EObjectType::MapBuildingProjectile, "MapBuildingProjectiles" },
    { EObjectType::MapBuildingWeapon, "MapBuildingWeapons" },
    { EObjectType::MapGood, "MapGoods" },
    { EObjectType::MapObject, "MapObjects" },
    { EObjectType::Mechanoid, "Mechanoids" },
    { EObjectType::MechanoidQuest, "MechanoidQuests" },
    { EObjectType::Modification, "Modifications" },
    { EObjectType::ModificationMap, "ModificationMaps" },
    { EObjectType::Modificator, "Modificators" },
    { EObjectType::Object, "Objects" },
    { EObjectType::Player, "Players" },
    { EObjectType::Projectile, "Projectiles" },
    { EObjectType::Quest, "Quests" },
    { EObjectType::QuestReward, "QuestRewards" },
    { EObjectType::QuestRewardEquipment, "QuestRewardEquipments" },
    { EObjectType::QuestRewardGlider, "QuestRewardGliders" },
    { EObjectType::QuestRewardGood, "QuestRewardGoods" },
    { EObjectType::QuestRewardModificator, "QuestRewardModificators" },
    { EObjectType::QuestRewardProjectile, "QuestRewardProjectiles" },
    { EObjectType::QuestRewardReputation, "QuestRewardReputations" },
    { EObjectType::QuestRewardWeapon, "QuestRewardWeapons" },
    { EObjectType::ScriptVariable, "ScriptVariables" },
    { EObjectType::Setting, "Settings" },
    { EObjectType::String, "Strings" },
    { EObjectType::Table, "Tables" },
    { EObjectType::Weapon, "Weapons" },
    { EObjectType::Any, "Anys" },
};

Text getTableNameByType(EObjectType type)
{
    return tables[type];
}

#ifdef USE_QT
typedef std::map<std::string, QString> FieldNames;

FieldNames fieldNames;

void retranslateFieldNames()
{
    FieldNames names =
    {
        { "T", QCoreApplication::translate("DB", "T") },
        { "Volatile", QCoreApplication::translate("DB", "Volatile") },
        { "angle", QCoreApplication::translate("DB", "angle") },
        { "armor", QCoreApplication::translate("DB", "armor") },
        { "author", QCoreApplication::translate("DB", "author") },
        { "bcolor", QCoreApplication::translate("DB", "bcolor") },
        { "bonusexp", QCoreApplication::translate("DB", "bonusexp") },
        { "bonusrepair", QCoreApplication::translate("DB", "bonusrepair") },
        { "bonustrade", QCoreApplication::translate("DB", "bonustrade") },
        { "building_id", QCoreApplication::translate("DB", "building") },
        { "bx", QCoreApplication::translate("DB", "bx") },
        { "by", QCoreApplication::translate("DB", "by") },
        { "careen", QCoreApplication::translate("DB", "careen") },
        { "clan_id", QCoreApplication::translate("DB", "clan") },
        { "clan1_id", QCoreApplication::translate("DB", "clan1") },
        { "clan2_id", QCoreApplication::translate("DB", "clan2") },
        { "color", QCoreApplication::translate("DB", "color") },
        { "comment", QCoreApplication::translate("DB", "comment") },
        { "configuration_id", QCoreApplication::translate("DB", "configuration") },
        { "cooperative_player_configuration_id", QCoreApplication::translate("DB", "cooperative_player_configuration") },
        { "damage", QCoreApplication::translate("DB", "damage") },
        { "damagetype", QCoreApplication::translate("DB", "damagetype") },
        { "date_created", QCoreApplication::translate("DB", "date_created") },
        { "date_modified", QCoreApplication::translate("DB", "date_modified") },
        { "delta_t", QCoreApplication::translate("DB", "delta_t") },
        { "description_id", QCoreApplication::translate("DB", "description") },
        { "detonation_delay", QCoreApplication::translate("DB", "detonation_delay") },
        { "directory", QCoreApplication::translate("DB", "directory") },
        { "distance_detonation", QCoreApplication::translate("DB", "distance_detonation") },
        { "durability", QCoreApplication::translate("DB", "durability") },
        { "en", QCoreApplication::translate("DB", "en") },
        { "equipment_id", QCoreApplication::translate("DB", "equipment") },
        { "firerate", QCoreApplication::translate("DB", "firerate") },
        { "fx", QCoreApplication::translate("DB", "fx") },
        { "fxmodeltime", QCoreApplication::translate("DB", "fxmodeltime") },
        { "fxtime", QCoreApplication::translate("DB", "fxtime") },
        { "gcolor", QCoreApplication::translate("DB", "gcolor") },
        { "generation", QCoreApplication::translate("DB", "generation") },
        { "glider_id", QCoreApplication::translate("DB", "glider") },
        { "good_id", QCoreApplication::translate("DB", "good") },
        { "group_id", QCoreApplication::translate("DB", "group") },
        { "h_max", QCoreApplication::translate("DB", "h_max") },
        { "h_min", QCoreApplication::translate("DB", "h_min") },
        { "helpness", QCoreApplication::translate("DB", "helpness") },
        { "id", QCoreApplication::translate("DB", "id") },
        { "inside_mul", QCoreApplication::translate("DB", "inside_mul") },
        { "inside_x", QCoreApplication::translate("DB", "inside_x") },
        { "inside_y", QCoreApplication::translate("DB", "inside_y") },
        { "inside_z", QCoreApplication::translate("DB", "inside_z") },
        { "interactive", QCoreApplication::translate("DB", "interactive") },
        { "k_param1", QCoreApplication::translate("DB", "k_param1") },
        { "k_param2", QCoreApplication::translate("DB", "k_param2") },
        { "k_price", QCoreApplication::translate("DB", "k_price") },
        { "kx", QCoreApplication::translate("DB", "kx") },
        { "ky", QCoreApplication::translate("DB", "ky") },
        { "life_time", QCoreApplication::translate("DB", "life_time") },
        { "manual", QCoreApplication::translate("DB", "manual") },
        { "map_id", QCoreApplication::translate("DB", "map") },
        { "map_building_id", QCoreApplication::translate("DB", "map_building") },
        { "mask", QCoreApplication::translate("DB", "mask") },
        { "maxdistance", QCoreApplication::translate("DB", "maxdistance") },
        { "maxweight", QCoreApplication::translate("DB", "maxweight") },
        { "mechanoid_id", QCoreApplication::translate("DB", "mechanoid") },
        { "member_name_id", QCoreApplication::translate("DB", "member_name") },
        { "modification_id", QCoreApplication::translate("DB", "modification") },
        { "modificator_id", QCoreApplication::translate("DB", "modificator") },
        { "money", QCoreApplication::translate("DB", "money") },
        { "name_id", QCoreApplication::translate("DB", "name") },
        { "noblivion", QCoreApplication::translate("DB", "noblivion") },
        { "notrade", QCoreApplication::translate("DB", "notrade") },
        { "numstate", QCoreApplication::translate("DB", "numstate") },
        { "object_id", QCoreApplication::translate("DB", "object") },
        { "pitch", QCoreApplication::translate("DB", "pitch") },
        { "player_id", QCoreApplication::translate("DB", "player") },
        { "player_mechanoid_id", QCoreApplication::translate("DB", "player_mechanoid") },
        { "playereffect", QCoreApplication::translate("DB", "playereffect") },
        { "power", QCoreApplication::translate("DB", "power") },
        { "price", QCoreApplication::translate("DB", "price") },
        { "probability", QCoreApplication::translate("DB", "probability") },
        { "projectile_id", QCoreApplication::translate("DB", "projectile") },
        { "quantity", QCoreApplication::translate("DB", "quantity") },
        { "quest_id", QCoreApplication::translate("DB", "quest") },
        { "quest_reward_id", QCoreApplication::translate("DB", "quest_reward") },
        { "rating", QCoreApplication::translate("DB", "rating") },
        { "rating_courier", QCoreApplication::translate("DB", "rating_courier") },
        { "rating_fight", QCoreApplication::translate("DB", "rating_fight") },
        { "rating_trade", QCoreApplication::translate("DB", "rating_trade") },
        { "rcolor", QCoreApplication::translate("DB", "rcolor") },
        { "reconstruction", QCoreApplication::translate("DB", "reconstruction") },
        { "reputation", QCoreApplication::translate("DB", "reputation") },
        { "resfront", QCoreApplication::translate("DB", "resfront") },
        { "resource", QCoreApplication::translate("DB", "resource") },
        { "resource_drop", QCoreApplication::translate("DB", "resource_drop") },
        { "resside", QCoreApplication::translate("DB", "resside") },
        { "resstop", QCoreApplication::translate("DB", "resstop") },
        { "restore", QCoreApplication::translate("DB", "restore") },
        { "roll", QCoreApplication::translate("DB", "roll") },
        { "rotate", QCoreApplication::translate("DB", "rotate") },
        { "rotatespeed", QCoreApplication::translate("DB", "rotatespeed") },
        { "ru", QCoreApplication::translate("DB", "ru") },
        { "scale", QCoreApplication::translate("DB", "scale") },
        { "scale_x", QCoreApplication::translate("DB", "scale_x") },
        { "scale_y", QCoreApplication::translate("DB", "scale_y") },
        { "scale_z", QCoreApplication::translate("DB", "scale_z") },
        { "script_language", QCoreApplication::translate("DB", "script_language") },
        { "script_main", QCoreApplication::translate("DB", "script_main") },
        { "shootscale", QCoreApplication::translate("DB", "shootscale") },
        { "shoottype", QCoreApplication::translate("DB", "shoottype") },
        { "spare", QCoreApplication::translate("DB", "spare") },
        { "special", QCoreApplication::translate("DB", "special") },
        { "speed", QCoreApplication::translate("DB", "speed") },
        { "stabfront", QCoreApplication::translate("DB", "stabfront") },
        { "stabside", QCoreApplication::translate("DB", "stabside") },
        { "standard", QCoreApplication::translate("DB", "standard") },
        { "state", QCoreApplication::translate("DB", "state") },
        { "strength", QCoreApplication::translate("DB", "strength") },
        { "subtype", QCoreApplication::translate("DB", "subtype") },
        { "table_id", QCoreApplication::translate("DB", "table") },
        { "text", QCoreApplication::translate("DB", "text") },
        { "text_id", QCoreApplication::translate("DB", "text_id") },
        { "tfire", QCoreApplication::translate("DB", "tfire") },
        { "time", QCoreApplication::translate("DB", "time") },
        { "title_id", QCoreApplication::translate("DB", "title") },
        { "turbulence", QCoreApplication::translate("DB", "turbulence") },
        { "type", QCoreApplication::translate("DB", "type") },
        { "typearms", QCoreApplication::translate("DB", "typearms") },
        { "unicum_id", QCoreApplication::translate("DB", "unicum_id") },
        { "value1", QCoreApplication::translate("DB", "value1") },
        { "value2", QCoreApplication::translate("DB", "value2") },
        { "value3", QCoreApplication::translate("DB", "value3") },
        { "value_blob", QCoreApplication::translate("DB", "value_blob") },
        { "value_float", QCoreApplication::translate("DB", "value_float") },
        { "value_int", QCoreApplication::translate("DB", "value_int") },
        { "value_text", QCoreApplication::translate("DB", "value_text") },
        { "variable", QCoreApplication::translate("DB", "variable") },
        { "version", QCoreApplication::translate("DB", "version") },
        { "vtype", QCoreApplication::translate("DB", "vtype") },
        { "weapon_id", QCoreApplication::translate("DB", "weapon") },
        { "weight", QCoreApplication::translate("DB", "weight") },
        { "x", QCoreApplication::translate("DB", "x") },
        { "xstate", QCoreApplication::translate("DB", "xstate") },
        { "y", QCoreApplication::translate("DB", "y") },
        { "yaw", QCoreApplication::translate("DB", "yaw") },
        { "z", QCoreApplication::translate("DB", "z") },
    };
    fieldNames = names;
}

QString getFieldName(const std::string &name)
{
    return fieldNames[name];
}

typedef std::map<std::string, QString> TableNames;

TableNames tableNames;

void retranslateTableNames()
{
    TableNames names =
    {
        { "None", QCoreApplication::translate("DB", "None") },
        { "Building", QCoreApplication::translate("DB", "Building") },
        { "Clan", QCoreApplication::translate("DB", "Clan") },
        { "ClanReputation", QCoreApplication::translate("DB", "Clan Reputation") },
        { "Configuration", QCoreApplication::translate("DB", "Configuration") },
        { "ConfigurationEquipment", QCoreApplication::translate("DB", "Configuration Equipment") },
        { "ConfigurationGood", QCoreApplication::translate("DB", "Configuration Good") },
        { "ConfigurationProjectile", QCoreApplication::translate("DB", "Configuration Projectile") },
        { "ConfigurationWeapon", QCoreApplication::translate("DB", "Configuration Weapon") },
        { "Equipment", QCoreApplication::translate("DB", "Equipment") },
        { "Glider", QCoreApplication::translate("DB", "Glider") },
        { "Good", QCoreApplication::translate("DB", "Good") },
        { "Group", QCoreApplication::translate("DB", "Group") },
        { "GroupMechanoid", QCoreApplication::translate("DB", "Group Mechanoid") },
        { "Map", QCoreApplication::translate("DB", "Map") },
        { "MapBuilding", QCoreApplication::translate("DB", "Map Building") },
        { "MapBuildingEquipment", QCoreApplication::translate("DB", "Map Building Equipment") },
        { "MapBuildingGlider", QCoreApplication::translate("DB", "Map Building Glider") },
        { "MapBuildingGood", QCoreApplication::translate("DB", "Map Building Good") },
        { "MapBuildingModificator", QCoreApplication::translate("DB", "Map Building Modificator") },
        { "MapBuildingProjectile", QCoreApplication::translate("DB", "Map Building Projectile") },
        { "MapBuildingWeapon", QCoreApplication::translate("DB", "Map Building Weapon") },
        { "MapGood", QCoreApplication::translate("DB", "Map Good") },
        { "MapObject", QCoreApplication::translate("DB", "Map Object") },
        { "Mechanoid", QCoreApplication::translate("DB", "Mechanoid") },
        { "MechanoidQuest", QCoreApplication::translate("DB", "Mechanoid Quest") },
        { "Modification", QCoreApplication::translate("DB", "Modification") },
        { "ModificationMap", QCoreApplication::translate("DB", "Modification Map") },
        { "Modificator", QCoreApplication::translate("DB", "Modificator") },
        { "Object", QCoreApplication::translate("DB", "Object") },
        { "Player", QCoreApplication::translate("DB", "Player") },
        { "Projectile", QCoreApplication::translate("DB", "Projectile") },
        { "Quest", QCoreApplication::translate("DB", "Quest") },
        { "QuestReward", QCoreApplication::translate("DB", "Quest Reward") },
        { "QuestRewardEquipment", QCoreApplication::translate("DB", "Quest Reward Equipment") },
        { "QuestRewardGlider", QCoreApplication::translate("DB", "Quest Reward Glider") },
        { "QuestRewardGood", QCoreApplication::translate("DB", "Quest Reward Good") },
        { "QuestRewardModificator", QCoreApplication::translate("DB", "Quest Reward Modificator") },
        { "QuestRewardProjectile", QCoreApplication::translate("DB", "Quest Reward Projectile") },
        { "QuestRewardReputation", QCoreApplication::translate("DB", "Quest Reward Reputation") },
        { "QuestRewardWeapon", QCoreApplication::translate("DB", "Quest Reward Weapon") },
        { "ScriptVariable", QCoreApplication::translate("DB", "Script Variable") },
        { "Setting", QCoreApplication::translate("DB", "Setting") },
        { "String", QCoreApplication::translate("DB", "String") },
        { "Table", QCoreApplication::translate("DB", "Table") },
        { "Weapon", QCoreApplication::translate("DB", "Weapon") },
        { "Any", QCoreApplication::translate("DB", "Any Table") },
    };
    tableNames = names;
}

QString getTableName(const std::string &name)
{
    return tableNames[name];
}

#endif
